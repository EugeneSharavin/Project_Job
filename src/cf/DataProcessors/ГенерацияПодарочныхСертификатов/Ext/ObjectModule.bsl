
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	Если ВариантГенерацииПодарочныхСертификатов = "с номерами в указанном диапазоне" Тогда
		Индекс = ПроверяемыеРеквизиты.Найти("ДиапазонНомераС");
		Если Индекс = Неопределено Тогда
			ПроверяемыеРеквизиты.Добавить("ДиапазонНомераС");
		КонецЕсли;
		
		Индекс = ПроверяемыеРеквизиты.Найти("ДиапазонНомераПо");
		Если Индекс = Неопределено Тогда
			ПроверяемыеРеквизиты.Добавить("ДиапазонНомераПо");
		КонецЕсли;
	Иначе
		Индекс = ПроверяемыеРеквизиты.Найти("ДиапазонНомераС");
		Если Индекс <> Неопределено Тогда
			ПроверяемыеРеквизиты.Удалить(Индекс);
		КонецЕсли;
		
		Индекс = ПроверяемыеРеквизиты.Найти("ДиапазонНомераПо");
		Если Индекс <> Неопределено Тогда
			ПроверяемыеРеквизиты.Удалить(Индекс);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция СгенерироватьПодарочныеСертификаты() Экспорт
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат Ложь;
	КонецЕсли;

	Если ВариантГенерацииПодарочныхСертификатов = "с номерами в указанном диапазоне" Тогда
		Если НЕ НомерСоответствуетШаблону(ДиапазонНомераС, ШаблонНомера) Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Нижняя граница диапазона номеров генерируемых сертификатов не соответствует установленному шаблону!'"), , "ДиапазонНомераС", "Объект");
			Возврат Ложь;
		КонецЕсли;
		
		Если НЕ НомерСоответствуетШаблону(ДиапазонНомераПо, ШаблонНомера) Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Верхняя граница диапазона номеров генерируемых сертификатов не соответствует установленному шаблону!'"), , "ДиапазонНомераПо", "Объект");
			Возврат Ложь;
		КонецЕсли;
		
		Если ДиапазонНомераС > ДиапазонНомераПо Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Нижняя граница диапазона номеров генерируемых сертификатов не может превышать верхнюю!'"), , "ДиапазонНомераС", "Объект");
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	//{ APDEX
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("ГенерацияПодарочныхСертификатов");
	//} APDEX
	
	//Идея в том, что в случае, если номера в диапазоне начинаются с нуля (нулей), в числовой текущий номер
	//такие ведущие нули не попадают, но если прибавить к границам число с заведомо большей разрядностью, чем длина номера
	//сертификата и далее для таких очередных числовх значений номеров преобразовать к строке, то ведущие нули не потеряются
	Смещение = 10000000000000000000000000;
	
	Если ВариантГенерацииПодарочныхСертификатов = "с номерами в указанном диапазоне" Тогда
		НижняяГраницаДиапазонаЧислом = Число(СтрЗаменить(ДиапазонНомераС, " ", "")) + Смещение;
		ВерхняяГраницаДиапазонаЧислом = Число(СтрЗаменить(ДиапазонНомераПо, " ", "")) + Смещение;
	Иначе
		НижняяГраницаДиапазонаЧислом = 1 + Смещение;
		ВерхняяГраницаДиапазонаЧислом = Число(СтрЗаменить(ШаблонНомера, " ", "")) + Смещение;
	КонецЕсли;
	
	//Запомним строки табличной части, если придется откатываться (удалять) в случае ошибки
	СтрокиДобавленныхСертификатов = Новый Массив;
	
	МаксимальноеКоличествоПодарочныхСертификатовВДокументеВыпуска = 
		Константы.МаксимальноеКоличествоПодарочныхСертификатовВДокументеВыпуска.Получить();
		
	Если МаксимальноеКоличествоПодарочныхСертификатовВДокументеВыпуска = 0 Тогда
		МаксимальноеКоличествоПодарочныхСертификатовВДокументеВыпуска = 1000;
	КонецЕсли;
	
	НовыйДокумент = Неопределено;
	
	НачатьТранзакцию();
	
	Попытка				
		ЗаблокироватьДанныеДляРедактирования(ВидПодарочныхСертификатов);
		
		СозданоЭлементов = 0;
		
		Для ТекущийНомерСертификатаЧислом = НижняяГраницаДиапазонаЧислом По ВерхняяГраницаДиапазонаЧислом Цикл
			Если СозданоЭлементов % МаксимальноеКоличествоПодарочныхСертификатовВДокументеВыпуска = 0 Тогда				
				Если СозданоЭлементов > 0 Тогда
					НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
				КонецЕсли;			

				НовыйДокумент = Документы.ВыпускПодарочныхСертификатов.СоздатьДокумент();
				
				НовыйДокумент.Дата = ТекущаяДатаСеанса();
				НовыйДокумент.ВидПодарочныхСертификатов = ВидПодарочныхСертификатов;
				НовыйДокумент.Комментарий = Комментарий;
				НовыйДокумент.Ответственный = Ответственный;
			КонецЕсли;

			НовыйЭлемент = Справочники.ПодарочныеСертификаты.СоздатьЭлемент();
			
			НовыйЭлемент.Владелец = ВидПодарочныхСертификатов;
			НовыйЭлемент.Код = ПолучитьНомерСертификатаСоответствующегоШаблону(ТекущийНомерСертификатаЧислом, ШаблонНомера);
			
			НовыйЭлемент.ДополнительныеСвойства.Вставить("КонтролироватьУникальностьПоВсемВидам", КонтрольУникальностиНомеров = "по всем видам сертификатов");
			НовыйЭлемент.Записать();
			
			СозданоЭлементов = СозданоЭлементов + 1;
					
			НоваяСтрока = НовыйДокумент.ПодарочныеСертификаты.Добавить();
			НоваяСтрока.ПодарочныйСертификат = НовыйЭлемент.Ссылка;
			
			НоваяСтрока = ПодарочныеСертификаты.Добавить();
			НоваяСтрока.ПодарочныйСертификат = НовыйЭлемент.Ссылка;
			СтрокиДобавленныхСертификатов.Добавить(НоваяСтрока);
		КонецЦикла;
				
		Если НовыйДокумент.Модифицированность() Тогда
			НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
		//{ APDEX
		ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, ВерхняяГраницаДиапазонаЧислом - НижняяГраницаДиапазонаЧислом - 1);
		//} APDEX

		Возврат Истина;
	Исключение
		ОтменитьТранзакцию();

		Информация = ИнформацияОбОшибке().Описание;
		ОбщегоНазначения.СообщитьПользователю(Информация);
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Подарочные сертификаты не сгенерированы'"));
		
		Для Каждого Строка Из СтрокиДобавленныхСертификатов Цикл 
			ПодарочныеСертификаты.Удалить(Строка);
		КонецЦикла;
		
		Возврат Ложь;
	КонецПопытки;
КонецФункции

Функция НомерСоответствуетШаблону(Номер, Шаблон)
	Если СтрДлина(Номер) <> СтрДлина(Шаблон) Тогда
		Возврат Ложь;
	Иначе     
		Для Н = 1 По СтрДлина(Номер) Цикл
			ТекСимволНомера = Сред(Номер, Н, 1);
			ТекСимволШаблона = Сред(Шаблон, Н, 1);
			
			Если ТекСимволНомера <> ТекСимволШаблона И 
					(НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ТекСимволНомера) И
					ТекСимволШаблона = "9" ИЛИ ТекСимволШаблона <> "9") Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;        
	
	Возврат Истина;
КонецФункции

Функция ПолучитьНомерСертификатаСоответствующегоШаблону(НомерСертификата, ШаблонНомера) Экспорт
	КоличествоЦифрВШаблоне = СтрДлина(СтрЗаменить(ШаблонНомера, " ", ""));
	
	ДлинаШаблона = СтрДлина(ШаблонНомера);
	СтрокаНулей = "";
	Для Н = 1 По ДлинаШаблона Цикл 
		СтрокаНулей = СтрокаНулей + "0";
	КонецЦикла;
	
	НомерСертификатаСтрокой = Прав(СтрокаНулей + Формат(НомерСертификата, "ЧГ="), КоличествоЦифрВШаблоне);
	
	Результат = "";
	НомерТекущегоЧисловогоСимволаШаблона = 0;
	
	Для Н = 1 По СтрДлина(ШаблонНомера) Цикл
		ТекСимволШаблона = Сред(ШаблонНомера, Н, 1);
		Если ТекСимволШаблона = " " Тогда
			Результат = Результат + " ";
		Иначе
			НомерТекущегоЧисловогоСимволаШаблона = НомерТекущегоЧисловогоСимволаШаблона + 1;
			Результат = Результат + Сред(НомерСертификатаСтрокой, НомерТекущегоЧисловогоСимволаШаблона, 1);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

