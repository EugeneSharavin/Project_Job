
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("ВидПодарочныхСертификатов") Тогда
		Объект.ВидПодарочныхСертификатов = Параметры.ВидПодарочныхСертификатов;
		ВидПодарочныхСертификатовПриИзмененииНаСервере();
	КонецЕсли;
	
	Объект.ВариантГенерацииПодарочныхСертификатов = "с номерами в указанном диапазоне";
	
	ОбновитьСостояниеКонтрольяУникальностиНомеров();
КонецПроцедуры

&НаСервере
Процедура ОбновитьСостояниеКонтрольяУникальностиНомеров()
	ЕстьДублиНомеров = ПодарочныеСертификатыСервер.ЕстьДублиНомеровПодарочныхСертификатов();
	
	Элементы.КонтрольУникальностиНомеров.ТолькоПросмотр = ЕстьДублиНомеров;
	Элементы.КонтрольУникальностиНомеров.ОтображениеПодсказки = ?(ЕстьДублиНомеров, ОтображениеПодсказки.ОтображатьСправа, ОтображениеПодсказки.Нет);
	
	КонтрольУникальностиНомеров = ?(ЕстьДублиНомеров, "в рамках выбранного вида", 
										?(Константы.КонтролироватьУникальностьНомеровПодарочныхСертификатовПоВсемВидам.Получить(), 
											"по всем видам сертификатов", "в рамках выбранного вида"));
КонецПроцедуры
	
&НаСервере
Процедура ЗаполнитьПодарочныеСертификаты()
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПодарочныеСертификаты.Ссылка КАК ПодарочныйСертификат
		|ИЗ
		|	Справочник.ПодарочныеСертификаты КАК ПодарочныеСертификаты
		|ГДЕ
		|	ПодарочныеСертификаты.Владелец = &ВидПодарочныхСертификатов
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПодарочныеСертификаты.Код";
	
	Запрос.УстановитьПараметр("ВидПодарочныхСертификатов", Объект.ВидПодарочныхСертификатов);
	
	РезультатЗапроса = Запрос.Выполнить();
	Объект.ПодарочныеСертификаты.Загрузить(РезультатЗапроса.Выгрузить());	
КонецПроцедуры

&НаСервере
Процедура ВидПодарочныхСертификатовПриИзмененииНаСервере()
	ШаблонНомера = ПолучитьШаблонНомеровПодарочныхСертификатов(Объект.ВидПодарочныхСертификатов);
	Элементы.ДиапазонНомераС.Маска = ШаблонНомера;
	Элементы.ДиапазонНомераПо.Маска = ШаблонНомера;
	
	ЗаполнитьПодарочныеСертификаты();
КонецПроцедуры

&НаКлиенте
Процедура ВидПодарочныхСертификатовПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.ВидПодарочныхСертификатов) Тогда
		ВидПодарочныхСертификатовПриИзмененииНаСервере();
	Иначе
		Объект.ПодарочныеСертификаты.Очистить();
		ШаблонНомера = "";
		Объект.ДиапазонНомераС = "";
		Объект.ДиапазонНомераПо = "";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВариантГенерацииПодарочныхСертификатовПриИзменении(Элемент)
	Элементы.ГруппаДиапазонНомеровПодарочныхСертификатов.Видимость = 
		Объект.ВариантГенерацииПодарочныхСертификатов = "с номерами в указанном диапазоне";
КонецПроцедуры

&НаКлиенте
Процедура ВариантГенерацииПодарочныхСертификатовОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура КонтрольУникальностиНомеровПриИзмененииНаСервере(КонтрольУникальностиНомеров)
	Константы.КонтролироватьУникальностьНомеровПодарочныхСертификатовПоВсемВидам.Установить(КонтрольУникальностиНомеров = "по всем видам сертификатов");
КонецПроцедуры

&НаКлиенте
Процедура КонтрольУникальностиНомеровПриИзменении(Элемент)
	КонтрольУникальностиНомеровПриИзмененииНаСервере(КонтрольУникальностиНомеров);
КонецПроцедуры

&НаСервереБезКонтекста
Функция НомерСоответствуетШаблону(Номер, Шаблон)
	Если СтрДлина(Номер) <> СтрДлина(Шаблон) Тогда
		Возврат Ложь;
	Иначе     
		Для Н = 1 По СтрДлина(Номер) Цикл
			ТекСимволНомера = Сред(Номер, Н, 1);
			ТекСимволШаблона = Сред(Шаблон, Н, 1);
			
			Если ТекСимволНомера <> ТекСимволШаблона И 
					(НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ТекСимволНомера) И
					ТекСимволШаблона = "9" ИЛИ ТекСимволШаблона <> "9") Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;        
	
	Возврат Истина;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьНомерСертификатаСоответствующегоШаблону(НомерСертификата, ШаблонНомера)
	КоличествоЦифрВШаблоне = СтрДлина(СтрЗаменить(ШаблонНомера, " ", ""));
	НомерСертификатаСтрокой = Прав(Формат(НомерСертификата, "ЧГ="), КоличествоЦифрВШаблоне);
	
	Результат = "";
	НомерТекущегоЧисловогоСимволаШаблона = 0;
	
	Для Н = 1 По СтрДлина(ШаблонНомера) Цикл
		ТекСимволШаблона = Сред(ШаблонНомера, Н, 1);
		Если ТекСимволШаблона = " " Тогда
			Результат = Результат + " ";
		Иначе
			НомерТекущегоЧисловогоСимволаШаблона = НомерТекущегоЧисловогоСимволаШаблона + 1;
			Результат = Результат + Сред(НомерСертификатаСтрокой, НомерТекущегоЧисловогоСимволаШаблона, 1);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаСервере
Функция СгенерироватьПодарочныеСертификатыНаСервере()
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат Ложь;
	КонецЕсли;

	Если Объект.ВариантГенерацииПодарочныхСертификатов = "с номерами в указанном диапазоне" Тогда
		Если НЕ НомерСоответствуетШаблону(Объект.ДиапазонНомераС, ШаблонНомера) Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Нижняя граница диапазона номеров генерируемых сертификатов не соответствует установленному шаблону!'"), , "ДиапазонНомераС", "Объект");
			Возврат Ложь;
		КонецЕсли;
		
		Если НЕ НомерСоответствуетШаблону(Объект.ДиапазонНомераПо, ШаблонНомера) Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Верхняя граница диапазона номеров генерируемых сертификатов не соответствует установленному шаблону!'"), , "ДиапазонНомераПо", "Объект");
			Возврат Ложь;
		КонецЕсли;
		
		Если Объект.ДиапазонНомераС > Объект.ДиапазонНомераПо Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Нижняя граница диапазона номеров генерируемых сертификатов не может превышать верхнюю!'"), , "ДиапазонНомераС", "Объект");
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	//Идея в том, что в случае, если номера в диапазоне начинаются с нуля (нулей), в числовой текущий номер
	//такие ведущие нули не попадают, но если прибавить к границам число с заведомо большей разрядностью, чем длина номера
	//сертификата и далее для таких очередных числовх значений номеров преобразовать к строке, то ведущие нули не потеряются
	Смещение = 10000000000000000000000000;
	
	Если Объект.ВариантГенерацииПодарочныхСертификатов = "с номерами в указанном диапазоне" Тогда
		НижняяГраницаДиапазонаЧислом = Число(СтрЗаменить(Объект.ДиапазонНомераС, " ", "")) + Смещение;
		ВерхняяГраницаДиапазонаЧислом = Число(СтрЗаменить(Объект.ДиапазонНомераПо, " ", "")) + Смещение;
	Иначе
		НижняяГраницаДиапазонаЧислом = 1 + Смещение;
		ВерхняяГраницаДиапазонаЧислом = Число(СтрЗаменить(ШаблонНомера, " ", "")) + Смещение;
	КонецЕсли;
	
	//Запомним строки табличной части, если придется откатываться (удалять) в случае ошибки
	СтрокиДобавленныхСертификатов = Новый Массив;
	
	НачатьТранзакцию();
	
	Попытка				
		ЗаблокироватьДанныеДляРедактирования(Объект.ВидПодарочныхСертификатов);
		
		Для ТекущийНомерСертификатаЧислом = НижняяГраницаДиапазонаЧислом По ВерхняяГраницаДиапазонаЧислом Цикл
			НовыйЭлемент = Справочники.ПодарочныеСертификаты.СоздатьЭлемент();
			
			НовыйЭлемент.Владелец = Объект.ВидПодарочныхСертификатов;
			НовыйЭлемент.Код = ПолучитьНомерСертификатаСоответствующегоШаблону(ТекущийНомерСертификатаЧислом, ШаблонНомера);
			
			НовыйЭлемент.ДополнительныеСвойства.Вставить("КонтролироватьУникальностьПоВсемВидам", КонтрольУникальностиНомеров = "по всем видам сертификатов");
			НовыйЭлемент.Записать();
			
			НоваяСтрока = Объект.ПодарочныеСертификаты.Добавить();
			НоваяСтрока.ПодарочныйСертификат = НовыйЭлемент.Ссылка;
			СтрокиДобавленныхСертификатов.Добавить(НоваяСтрока);
		КонецЦикла;
			
		ЗафиксироватьТранзакцию();
		
		Возврат Истина;
	Исключение
		ОтменитьТранзакцию();

		Информация = ИнформацияОбОшибке().Описание;
		ОбщегоНазначения.СообщитьПользователю(Информация);
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Подарочные сертификаты не сгенерированы'"));
		
		Для Каждого Строка Из СтрокиДобавленныхСертификатов Цикл 
			Объект.ПодарочныеСертификаты.Удалить(Строка);
		КонецЦикла;
		
		Возврат Ложь;
	КонецПопытки;
КонецФункции

&НаКлиенте
Процедура СгенерироватьПодарочныеСертификаты(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьОтветНаВопросОГенерацииПодарочныхСертификатов", ЭтотОбъект);
	ТекстВопроса = СтрШаблон(НСтр("ru = 'Сгенерировать подарочные сертификаты%1%2?'"),
								Символы.ПС,
								НСтр("ru = '" + Объект.ВариантГенерацииПодарочныхСертификатов + "'"));
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтветНаВопросОГенерацииПодарочныхСертификатов(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Если СгенерироватьПодарочныеСертификатыНаСервере() Тогда
			ОбновитьСостояниеКонтрольяУникальностиНомеров();
			ПоказатьОповещениеПользователя(НСтр("ru = 'Подарочные сертификаты успешно сгенерированы'"));
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьШаблонНомеровПодарочныхСертификатов(ВидПодарочныхСертификатов)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидПодарочныхСертификатов, "ШаблонНомера");		
КонецФункции

&НаКлиенте
Процедура ОбновитьСписокСертификатов(Команда)
	ЗаполнитьПодарочныеСертификаты();
КонецПроцедуры

&НаКлиенте
Процедура ПодарочныеСертификатыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПоказатьЗначение(, Объект.ПодарочныеСертификаты.НайтиПоИдентификатору(ВыбраннаяСтрока).ПодарочныйСертификат);
КонецПроцедуры
