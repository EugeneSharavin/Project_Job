///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Если ДанныеЗаполнения = Неопределено Тогда // Ввод нового.
		_ДемоСтандартныеПодсистемы.ПриВводеНовогоЗаполнитьОрганизацию(ЭтотОбъект, "ГоловнаяОрганизация");
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка._ДемоПоступлениеТоваров") Тогда
		ПоступлениеТоваров = ДанныеЗаполнения.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПоступлениеТоваров, , "Номер,Дата,Ответственный,Комментарий");
		ГоловнаяОрганизация = ПоступлениеТоваров.Организация;
		Ответственный = Пользователи.ТекущийПользователь();
		Для Каждого СтрокаТовары Из ПоступлениеТоваров.Товары Цикл
			НоваяСтрока = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);
			НоваяСтрока.ДокументПоступления = ДанныеЗаполнения;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	СформироватьДвиженияПоМестамХранения();
	
	//{	Шаравин Евгений 19.05.2025 по проектной работе курса "Архитектор 1С" (УЦ ОТУС)
    СформироватьДвиженияПоПодарочнымСертификатам(Отказ, РежимПроведения);
	//}
	
	СформироватьБухгалтерскиеДвижения();
	
	СформироватьДвиженияВРеестрДокументов();
	
КонецПроцедуры

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	Префикс = "А";
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТовары Из Товары Цикл
	
		Если Не ЗначениеЗаполнено(СтрокаТовары.КлючАналитики) Тогда
			ПараметрыКлюча = Новый Структура("Номенклатура, МестоХранения", СтрокаТовары.Номенклатура, МестоХранения);
			СтрокаТовары.КлючАналитики = Справочники._ДемоКлючиАналитикиНоменклатуры.СоздатьКлюч(ПараметрыКлюча);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СформироватьДвиженияПоМестамХранения()
	
	Движения._ДемоОстаткиТоваровВМестахХранения.Записывать = Истина;
	
	Для Каждого СтрокаТовары Из Товары Цикл
		
		Движение = Движения._ДемоОстаткиТоваровВМестахХранения.Добавить();
		
		Движение.Период        = Дата;
		Движение.ВидДвижения   = ВидДвиженияНакопления.Расход;
		
		Движение.Организация   = ГоловнаяОрганизация;
		Движение.МестоХранения = МестоХранения;
		
		Движение.Номенклатура  = СтрокаТовары.Номенклатура;
		Движение.Количество    = СтрокаТовары.Количество;
		
	КонецЦикла;
	
КонецПроцедуры
//
Процедура СформироватьДвиженияВРеестрДокументов()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Движение = РегистрыСведений._ДемоРеестрДокументов.СоздатьМенеджерЗаписи();
	Движение.ТипСсылки = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Ссылка.Метаданные());
	Движение.Организация = ГоловнаяОрганизация;
	Движение.Партнер = Партнер;
	Движение.МестоХранения = МестоХранения;
	Движение.Контрагент = Контрагент;
	Движение.Подразделение = Подразделение;
	Движение.ДатаДокументаИБ = Дата;
	Движение.Договор = Договор;
	Движение.Ссылка = Ссылка;
	Движение.НомерДокументаИБ = Номер;
	Движение.Ответственный = Ответственный;
	Движение.Комментарий = Комментарий;
	Движение.Проведен = Истина;
	Движение.ПометкаУдаления = Ложь;
	Движение.Дополнительно = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'По договору ""%1""'"), Договор);
	Движение.ДатаПервичногоДокумента = Дата;
	Движение.НомерПервичногоДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Номер, Истина, Истина);
	Движение.Сумма = Товары.Итог("Цена")*Товары.Итог("Количество");
	Движение.Валюта = Валюта;
	Движение.ДатаОтраженияВУчете = Дата;
	Движение.Записать();
	
КонецПроцедуры

Процедура СформироватьБухгалтерскиеДвижения()
	
	ВалютныйДокумент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Валюта, "Код") <> "643";
	Если Валюта.Пустая() Тогда
		ВалютаДокумента  = Новый Структура("Курс, Кратность", 1, 1,);
	Иначе
		ВалютаДокумента  = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Валюта, Дата);
	КонецЕсли;
	
	ОбрабатыватьНДС = ПолучитьФункциональнуюОпцию("_ДемоУчитыватьНДС") И Не ВалютныйДокумент;
	
	Движения._ДемоЖурналПроводокБухгалтерскогоУчета.Записывать = Истина;
	Движения._ДемоЖурналПроводокБухгалтерскогоУчетаБезКорреспонденции.Записывать = Истина;
	
	ВидыНоменклатуры = Новый Соответствие;
	Для Каждого СтрокаТовара Из Товары Цикл
		
		СформироватьДвижениеРеализацииТовараПоРегиструОсновной(СтрокаТовара, ВалютныйДокумент, ВалютаДокумента, ВидыНоменклатуры);
		СформироватьДвижениеРеализацииТовараПоРегиструОсновнойБезКорреспонденции(СтрокаТовара, ВалютныйДокумент, ВалютаДокумента, 
			ВидыНоменклатуры);
		
		Если ОбрабатыватьНДС Тогда
			СформироватьДвижениеУчетаНачисленногоНДСПоРегиструОсновной(СтрокаТовара, ВидыНоменклатуры);
			СформироватьДвижениеУчетаНачисленногоНДСПоРегиструОсновнойБезКорреспонденции(СтрокаТовара, ВидыНоменклатуры);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьДвижениеРеализацииТовараПоРегиструОсновной(Знач СтрокаТовара, Знач ВалютныйУчет, Знач ВалютаДокумента,
	Знач ВидыНоменклатуры)
	
	ВалютнаяСумма = СтрокаТовара.Цена * СтрокаТовара.Количество;
	РублеваяСумма = ВалютнаяСумма * ВалютаДокумента.Курс / ВалютаДокумента.Кратность;
	НоменклатурнаяГруппа = НоменклатурнаяГруппа(СтрокаТовара.Номенклатура, ВидыНоменклатуры);
	
	// ---
	Движение = Движения._ДемоЖурналПроводокБухгалтерскогоУчета.Добавить();
	Движение.Период      = Дата;
	Движение.Организация = ГоловнаяОрганизация;
	Движение.Содержание  = НСтр("ru = 'Реализация товаров'");
	Движение.Сумма       = РублеваяСумма;
	
	Если ВалютныйУчет Тогда
		Движение.СчетДт          = ПланыСчетов._ДемоОсновной.РасчетыСПокупателямиВал;
		Движение.ВалютаДт        = Валюта;
		Движение.ВалютнаяСуммаДт = ВалютнаяСумма;
	Иначе
		Движение.СчетДт = ПланыСчетов._ДемоОсновной.РасчетыСПокупателями;
	КонецЕсли;
	
	Движение.СубконтоДт.Контрагенты = Контрагент;
	Движение.СубконтоДт.Договоры    = Договор;
	
	Движение.СчетКт = ПланыСчетов._ДемоОсновной.Выручка;
	Движение.СубконтоКт.НоменклатурныеГруппы = НоменклатурнаяГруппа;
	
	Если Не ВалютныйУчет Тогда
		Движение.СубконтоКт.СтавкиНДС = СтавкаНДС;
	КонецЕсли;
	
	// ---
	Движение = Движения._ДемоЖурналПроводокБухгалтерскогоУчета.Добавить();
	Движение.Период      = Дата;
	Движение.Организация = ГоловнаяОрганизация;
	Движение.Содержание  = НСтр("ru = 'Реализация товаров'");
	Движение.Сумма       = РублеваяСумма;
	
	Движение.СчетДт = ПланыСчетов._ДемоОсновной.СебестоимостьПродаж;
	Движение.СубконтоДт.НоменклатурныеГруппы = НоменклатурнаяГруппа;
	
	Движение.СчетКт = ПланыСчетов._ДемоОсновной.ТоварыНаСкладах;
	
	Движение.СубконтоКт.Контрагенты  = Контрагент;
	Движение.СубконтоКт.Номенклатура = СтрокаТовара.Номенклатура;
	Движение.СубконтоКт.Склады       = МестоХранения;
	
	Движение.КоличествоКт = СтрокаТовара.Количество;
	
КонецПроцедуры

Процедура СформироватьДвижениеУчетаНачисленногоНДСПоРегиструОсновной(Знач СтрокаТовара, Знач ВидыНоменклатуры)
	
	РублеваяСумма = СтрокаТовара.Цена * СтрокаТовара.Количество;
	СуммаНДС = РублеваяСумма / 100 * ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтавкаНДС, "Ставка");
	НоменклатурнаяГруппа = НоменклатурнаяГруппа(СтрокаТовара.Номенклатура, ВидыНоменклатуры);
	
	Движение = Движения._ДемоЖурналПроводокБухгалтерскогоУчета.Добавить();
	Движение.Период      = Дата;
	Движение.Организация = ГоловнаяОрганизация;
	Движение.Сумма       = СуммаНДС;
	
	Движение.СчетДт = ПланыСчетов._ДемоОсновной.Продажи_НДС;
	Движение.СубконтоДт.НоменклатурныеГруппы = НоменклатурнаяГруппа;
	
	Движение.СчетКт = ПланыСчетов._ДемоОсновной.НДС;
	Движение.СубконтоКт.ВидыПлатежейВБюджет = Перечисления._ДемоВидыПлатежейВБюджет.Налог;
	
	Значения = Новый Структура;
	Значения.Вставить("Содержание", "ru = 'Реализация товаров';"); // @НСтр-2
	
	ОбщегоНазначения.УстановитьЗначенияРеквизитов(Движение, Значения);
	
КонецПроцедуры

Процедура СформироватьДвижениеРеализацииТовараПоРегиструОсновнойБезКорреспонденции(Знач СтрокаТовара, Знач ВалютныйУчет, 
	Знач ВалютаДокумента, Знач ВидыНоменклатуры)
	
	ВалютнаяСумма = СтрокаТовара.Цена * СтрокаТовара.Количество;
	РублеваяСумма = ВалютнаяСумма * ВалютаДокумента.Курс / ВалютаДокумента.Кратность;
	НоменклатурнаяГруппа = НоменклатурнаяГруппа(СтрокаТовара.Номенклатура, ВидыНоменклатуры);
	
	// ---
	Движение = Движения._ДемоЖурналПроводокБухгалтерскогоУчетаБезКорреспонденции.Добавить();
	Движение.Период      = Дата;
	Движение.Организация = ГоловнаяОрганизация;
	Движение.Содержание  = НСтр("ru = 'Реализация товаров'");
	Движение.Сумма       = РублеваяСумма;
	
	Если ВалютныйУчет Тогда
		Движение.Счет          = ПланыСчетов._ДемоОсновной.РасчетыСПокупателямиВал;
		Движение.Валюта        = Валюта;
		Движение.ВалютнаяСумма = ВалютнаяСумма;
	Иначе
		Движение.Счет = ПланыСчетов._ДемоОсновной.РасчетыСПокупателями;
	КонецЕсли; 
	
	Движение.Субконто.Контрагенты = Контрагент;
	Движение.Субконто.Договоры    = Договор;
	
	Движение = Движения._ДемоЖурналПроводокБухгалтерскогоУчетаБезКорреспонденции.Добавить();
	Движение.Период      = Дата;
	Движение.Организация = ГоловнаяОрганизация;
	Движение.Содержание  = НСтр("ru = 'Реализация товаров'");
	Движение.Сумма       = РублеваяСумма;
	Движение.Счет = ПланыСчетов._ДемоОсновной.Выручка;
	Движение.Субконто.НоменклатурныеГруппы = НоменклатурнаяГруппа;
	
	Если Не ВалютныйУчет Тогда
		Движение.Субконто.СтавкиНДС = СтавкаНДС;
	КонецЕсли;
	
	// ---
	Движение = Движения._ДемоЖурналПроводокБухгалтерскогоУчетаБезКорреспонденции.Добавить();
	Движение.Период      = Дата;
	Движение.Организация = ГоловнаяОрганизация;
	Движение.Содержание  = НСтр("ru = 'Реализация товаров'");
	Движение.Сумма       = РублеваяСумма;
	Движение.Счет = ПланыСчетов._ДемоОсновной.СебестоимостьПродаж;
	Движение.Субконто.НоменклатурныеГруппы = НоменклатурнаяГруппа;
		
	Движение = Движения._ДемоЖурналПроводокБухгалтерскогоУчетаБезКорреспонденции.Добавить();
	Движение.Период      = Дата;
	Движение.Организация = ГоловнаяОрганизация;
	Движение.Содержание  = НСтр("ru = 'Реализация товаров'");
	Движение.Сумма       = РублеваяСумма;
	Движение.Счет = ПланыСчетов._ДемоОсновной.ТоварыНаСкладах;
	Движение.Субконто.Контрагенты  = Контрагент;
	Движение.Субконто.Номенклатура = СтрокаТовара.Номенклатура;
	Движение.Субконто.Склады       = МестоХранения;	
	Движение.Количество = СтрокаТовара.Количество;
	
КонецПроцедуры

Процедура СформироватьДвижениеУчетаНачисленногоНДСПоРегиструОсновнойБезКорреспонденции(Знач СтрокаТовара, Знач ВидыНоменклатуры)
	
	РублеваяСумма = СтрокаТовара.Цена * СтрокаТовара.Количество;
	СуммаНДС = РублеваяСумма / 100 * ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтавкаНДС, "Ставка");
	НоменклатурнаяГруппа = НоменклатурнаяГруппа(СтрокаТовара.Номенклатура, ВидыНоменклатуры);
	
	Значения = Новый Структура;
	Значения.Вставить("Содержание", "ru = 'Реализация товаров';"); // @НСтр-2
	
	Движение = Движения._ДемоЖурналПроводокБухгалтерскогоУчетаБезКорреспонденции.Добавить();
	Движение.Период      = Дата;
	Движение.Организация = ГоловнаяОрганизация;
	Движение.Сумма       = СуммаНДС;
	Движение.Счет = ПланыСчетов._ДемоОсновной.Продажи_НДС;
	Движение.Субконто.НоменклатурныеГруппы = НоменклатурнаяГруппа; 
	ОбщегоНазначения.УстановитьЗначенияРеквизитов(Движение, Значения);
	
	Движение = Движения._ДемоЖурналПроводокБухгалтерскогоУчетаБезКорреспонденции.Добавить();
	Движение.Период      = Дата;
	Движение.Организация = ГоловнаяОрганизация;
	Движение.Сумма       = СуммаНДС;
	Движение.Счет = ПланыСчетов._ДемоОсновной.НДС;
	Движение.Субконто.ВидыПлатежейВБюджет = Перечисления._ДемоВидыПлатежейВБюджет.Налог;		
	ОбщегоНазначения.УстановитьЗначенияРеквизитов(Движение, Значения);
	
КонецПроцедуры

Функция НоменклатурнаяГруппа(Знач Номенклатура, Знач ВидыНоменклатуры)
	НоменклатурнаяГруппа = ВидыНоменклатуры[Номенклатура];
	Если НоменклатурнаяГруппа <> Неопределено Тогда
		НоменклатурнаяГруппа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ВидНоменклатуры");
		ВидыНоменклатуры[Номенклатура] = НоменклатурнаяГруппа;
	КонецЕсли;
	Возврат НоменклатурнаяГруппа;
КонецФункции

//Добавил Шаравин Евгений 19.05.2025 по проектной работе курса "Архитектор 1С" (УЦ ОТУС)
Процедура СформироватьДвиженияПоПодарочнымСертификатам(Отказ, Режим)
	ПодарочныеСертификатыСервер.ПроверитьНаличиеДублейПодарочныхСертификатовВДокументе(ЭтотОбъект, ОплатаПодарочнымиСертификатами, Отказ);
	
	Если ОплатаПодарочнымиСертификатами.Итог("СуммаОплаты") > Товары.Итог("Сумма") Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Общая сумма оплаты подарочными сертификатами не может превышать сумму документа!'"), ЭтотОбъект, "ПодарочныеСертификаты", , Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СтатусПолностьюИспользован = Перечисления.СтатусыПодарочныхСертификатов.ПолностьюИспользован;
	СтатусЧастичноИспользован = Перечисления.СтатусыПодарочныхСертификатов.ЧастичноИспользован;
	
	Движения.ИсторияСтатусовПодарочныхСертификатов.Записывать = Истина;
	Движения.ПодарочныеСертификаты.Записывать = Истина;
	
	Движения.Записать();	//очистка существующих движений при перепроведении
	
	//Снова устанавливаем признаки у наборов записей, так как выше сбросились
	Движения.ИсторияСтатусовПодарочныхСертификатов.Записывать = Истина;
	Движения.ПодарочныеСертификаты.Записывать = Истина;
	
	БлокировкаДанных = Новый БлокировкаДанных;
	
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрНакопления.ПодарочныеСертификаты");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = ОплатаПодарочнымиСертификатами;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ПодарочныйСертификат", "ПодарочныйСертификат");
	
	БлокировкаДанных.Заблокировать();

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РеализацияТоваровОплатаПодарочнымиСертификатами.ПодарочныйСертификат КАК ПодарочныйСертификат,
		|	РеализацияТоваровОплатаПодарочнымиСертификатами.ПодарочныйСертификат.Владелец.МногократноеИспользование КАК Многократный,
		|	РеализацияТоваровОплатаПодарочнымиСертификатами.ПодарочныйСертификат.Владелец.НоминальнаяСтоимость КАК НоминальнаяСтоимость,
		|	РеализацияТоваровОплатаПодарочнымиСертификатами.НомерСтроки КАК НомерСтроки,
		|	РеализацияТоваровОплатаПодарочнымиСертификатами.СуммаОплаты КАК СуммаОплаты
		|ПОМЕСТИТЬ ВТ_ПодарочныеСертификаты
		|ИЗ
		|	Документ._ДемоРеализацияТоваров.ОплатаПодарочнымиСертификатами КАК РеализацияТоваровОплатаПодарочнымиСертификатами
		|ГДЕ
		|	РеализацияТоваровОплатаПодарочнымиСертификатами.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИсторияСтатусовПодарочныхСертификатовСрезПоследних.ПодарочныйСертификат КАК ПодарочныйСертификат,
		|	ИсторияСтатусовПодарочныхСертификатовСрезПоследних.Статус КАК Статус,
		|	ИсторияСтатусовПодарочныхСертификатовСрезПоследних.ДействуетДо КАК ДействуетДо
		|ПОМЕСТИТЬ ВТ_СтатусыПодарочныхСертификатов
		|ИЗ
		|	РегистрСведений.ИсторияСтатусовПодарочныхСертификатов.СрезПоследних(
		|			&Дата,
		|			ПодарочныйСертификат В
		|				(ВЫБРАТЬ
		|					ВТ_ПодарочныеСертификаты.ПодарочныйСертификат КАК ПодарочныйСертификат
		|				ИЗ
		|					ВТ_ПодарочныеСертификаты КАК ВТ_ПодарочныеСертификаты)) КАК ИсторияСтатусовПодарочныхСертификатовСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ПодарочныйСертификат
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПодарочныеСертификатыОстатки.ПодарочныйСертификат КАК ПодарочныйСертификат,
		|	ПодарочныеСертификатыОстатки.СуммаОстаток КАК НеиспользованныйОстатокСтоимости
		|ПОМЕСТИТЬ ВТ_НеиспользованныеОстаткиСтоимостиСертификатов
		|ИЗ
		|	РегистрНакопления.ПодарочныеСертификаты.Остатки(
		|			&Дата,
		|			ПодарочныйСертификат В
		|				(ВЫБРАТЬ
		|					ВТ_ПодарочныеСертификаты.ПодарочныйСертификат КАК ПодарочныйСертификат
		|				ИЗ
		|					ВТ_ПодарочныеСертификаты КАК ВТ_ПодарочныеСертификаты)) КАК ПодарочныеСертификатыОстатки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ПодарочныйСертификат
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПодарочныеСертификаты.ПодарочныйСертификат КАК ПодарочныйСертификат,
		|	ПодарочныеСертификаты.НомерСтроки КАК НомерСтроки,
		|	ПодарочныеСертификаты.НоминальнаяСтоимость КАК НоминальнаяСтоимость,
		|	ПодарочныеСертификаты.СуммаОплаты КАК СуммаОплаты,
		|	ПодарочныеСертификаты.Многократный КАК Многократный,
		|	ЕСТЬNULL(ВТ_СтатусыПодарочныхСертификатов.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыПодарочныхСертификатов.ПустаяСсылка)) В (ЗНАЧЕНИЕ(Перечисление.СтатусыПодарочныхСертификатов.Активирован), ЗНАЧЕНИЕ(Перечисление.СтатусыПодарочныхСертификатов.ЧастичноИспользован)) КАК СертификатАктивирован,
		|	ЕСТЬNULL(ВТ_НеиспользованныеОстаткиСтоимостиСертификатов.НеиспользованныйОстатокСтоимости, 0) КАК НеиспользованныйОстатокСтоимости
		|ИЗ
		|	ВТ_ПодарочныеСертификаты КАК ПодарочныеСертификаты
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтатусыПодарочныхСертификатов КАК ВТ_СтатусыПодарочныхСертификатов
		|		ПО ПодарочныеСертификаты.ПодарочныйСертификат = ВТ_СтатусыПодарочныхСертификатов.ПодарочныйСертификат
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НеиспользованныеОстаткиСтоимостиСертификатов КАК ВТ_НеиспользованныеОстаткиСтоимостиСертификатов
		|		ПО ПодарочныеСертификаты.ПодарочныйСертификат = ВТ_НеиспользованныеОстаткиСтоимостиСертификатов.ПодарочныйСертификат
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПодарочныеСертификаты.НомерСтроки";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Дата", ?(Режим = РежимПроведенияДокумента.Оперативный, Неопределено, Дата));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если НЕ ВыборкаДетальныеЗаписи.СертификатАктивирован Тогда
			ОбщегоНазначения.СообщитьПользователю(СтрШаблон(НСтр("ru = 'В строке %1 подарочный сертификат не был активирован ранее (или уже полностью использован)!'"), ВыборкаДетальныеЗаписи.НомерСтроки), ЭтотОбъект, "ПодарочныеСертификаты[" + Формат(ВыборкаДетальныеЗаписи.НомерСтроки - 1, "ЧГ=") + "].ПодарочныйСертификат", , Отказ);
		КонецЕсли;
		
		Если ВыборкаДетальныеЗаписи.НеиспользованныйОстатокСтоимости = 0 Тогда
			ОбщегоНазначения.СообщитьПользователю(СтрШаблон(НСтр("ru = 'В строке %1 номинальная стоимость подарочного сертификата полностью погашена!'"), ВыборкаДетальныеЗаписи.НомерСтроки), ЭтотОбъект, "ПодарочныеСертификаты[" + Формат(ВыборкаДетальныеЗаписи.НомерСтроки - 1, "ЧГ=") + "].ПодарочныйСертификат", , Отказ);
		КонецЕсли;
		
		Если ВыборкаДетальныеЗаписи.СуммаОплаты > ВыборкаДетальныеЗаписи.НеиспользованныйОстатокСтоимости Тогда
			ОбщегоНазначения.СообщитьПользователю(СтрШаблон(НСтр("ru = 'В строке %1 сумма оплаты превышает доступный к оплате остаток по сертификату!'"), ВыборкаДетальныеЗаписи.НомерСтроки), ЭтотОбъект, "ПодарочныеСертификаты[" + Формат(ВыборкаДетальныеЗаписи.НомерСтроки - 1, "ЧГ=") + "].ПодарочныйСертификат", , Отказ);
		КонецЕсли;
		
		Если Отказ Тогда
			Продолжить;
		КонецЕсли;
		
		Движение = Движения.ИсторияСтатусовПодарочныхСертификатов.Добавить();
		Движение.Период = Дата;
		Движение.ПодарочныйСертификат = ВыборкаДетальныеЗаписи.ПодарочныйСертификат;
		Движение.Статус = ?(ВыборкаДетальныеЗаписи.Многократный И ВыборкаДетальныеЗаписи.СуммаОплаты < ВыборкаДетальныеЗаписи.НоминальнаяСтоимость,
								СтатусЧастичноИспользован, СтатусПолностьюИспользован);
		
		Движение = Движения.ПодарочныеСертификаты.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		Движение.Период = Дата;
		Движение.ПодарочныйСертификат = ВыборкаДетальныеЗаписи.ПодарочныйСертификат;
		Движение.Сумма = ?(ВыборкаДетальныеЗаписи.Многократный, ВыборкаДетальныеЗаписи.СуммаОплаты, ВыборкаДетальныеЗаписи.НеиспользованныйОстатокСтоимости);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли