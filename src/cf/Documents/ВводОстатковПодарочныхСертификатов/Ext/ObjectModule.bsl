
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	Ответственный = Пользователи.ТекущийПользователь();
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	СтатусАктивирован = Перечисления.СтатусыПодарочныхСертификатов.Активирован;
	СтатусЧастичноИспользован = Перечисления.СтатусыПодарочныхСертификатов.ЧастичноИспользован;

	Для Каждого Строка Из ПодарочныеСертификаты Цикл 
		Если (Строка.Статус = СтатусАктивирован ИЛИ Строка.Статус = СтатусЧастичноИспользован) И НЕ ЗначениеЗаполнено(Строка.ДействуетДо) Тогда
			ОбщегоНазначения.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Строка %1: не указан срок действия подарочного сертификата!'"), Строка.НомерСтроки), ЭтотОбъект, "ПодарочныеСертификаты[" + Формат(Строка.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].ДействуетДо", , Отказ);
		КонецЕсли;	
		Если Строка.Статус = СтатусЧастичноИспользован И НЕ ЗначениеЗаполнено(Строка.ОстатокСуммы) Тогда
			ОбщегоНазначения.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Строка %1: не указан остаток неиспользованной суммы сертификата!'"), Строка.НомерСтроки), ЭтотОбъект, "ПодарочныеСертификаты[" + Формат(Строка.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].ОстатокСуммы", , Отказ);
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	ОстатокСуммы = ПодарочныеСертификаты.Итог("ОстатокСуммы");
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда                                                          
		КонтролироватьУникальностьНомеровПодарочныхСертификатовПоВсемВидам = Константы.КонтролироватьУникальностьНомеровПодарочныхСертификатовПоВсемВидам.Получить();
		
		Для Каждого Строка Из ПодарочныеСертификаты Цикл
			Если ТипЗнч(Строка.ПодарочныйСертификат) = Тип("Строка") Тогда                                            
				Если КонтролироватьУникальностьНомеровПодарочныхСертификатовПоВсемВидам Тогда                       
					ПодарочныйСертификатСсылка = Справочники.ПодарочныеСертификаты.НайтиПоКоду(Строка.ПодарочныйСертификат);
				Иначе
					ПодарочныйСертификатСсылка = Справочники.ПодарочныеСертификаты.НайтиПоКоду(Строка.ПодарочныйСертификат, , , ВидПодарочныхСертификатов);
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ПодарочныйСертификатСсылка) Тогда
					ПодарочныйСертификат = Справочники.ПодарочныеСертификаты.СоздатьЭлемент();
					ПодарочныйСертификат.Владелец = ВидПодарочныхСертификатов;
					ПодарочныйСертификат.Код = Строка.ПодарочныйСертификат;
					ПодарочныйСертификат.ДополнительныеСвойства.Вставить("КонтролироватьУникальностьПоВсемВидам", КонтролироватьУникальностьНомеровПодарочныхСертификатовПоВсемВидам);
					ПодарочныйСертификат.Записать();
					ПодарочныйСертификатСсылка = ПодарочныйСертификат.Ссылка;
				КонецЕсли;                                                   
				
				Строка.ПодарочныйСертификат = ПодарочныйСертификатСсылка;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьДублиВводовОстатковПоПодарочнымСертификатам(Отказ)
	ПодарочныеСертификатыСервер.ПроверитьНаличиеДублейПодарочныхСертификатовВДокументе(ЭтотОбъект, ПодарочныеСертификаты, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВводОстатковПодарочныхСертификатовПодарочныеСертификаты.ПодарочныйСертификат КАК ПодарочныйСертификат
		|ПОМЕСТИТЬ ВТ_ПодарочныеСертификатыТекущегоДокумента
		|ИЗ
		|	Документ.ВводОстатковПодарочныхСертификатов.ПодарочныеСертификаты КАК ВводОстатковПодарочныхСертификатовПодарочныеСертификаты
		|ГДЕ
		|	ВводОстатковПодарочныхСертификатовПодарочныеСертификаты.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВводОстатковПодарочныхСертификатовПодарочныеСертификаты.Ссылка КАК Ссылка,
		|	ВводОстатковПодарочныхСертификатовПодарочныеСертификаты.ПодарочныйСертификат КАК ПодарочныйСертификат
		|ПОМЕСТИТЬ ВТ_ПодарочныеСертификатыДругихДокументов
		|ИЗ
		|	Документ.ВводОстатковПодарочныхСертификатов.ПодарочныеСертификаты КАК ВводОстатковПодарочныхСертификатовПодарочныеСертификаты
		|ГДЕ
		|	ВводОстатковПодарочныхСертификатовПодарочныеСертификаты.Ссылка <> &Ссылка
		|	И ВводОстатковПодарочныхСертификатовПодарочныеСертификаты.Ссылка.Проведен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ПодарочныеСертификатыДругихДокументов.Ссылка КАК Ссылка,
		|	ВТ_ПодарочныеСертификатыДругихДокументов.ПодарочныйСертификат КАК ПодарочныйСертификат
		|ИЗ
		|	ВТ_ПодарочныеСертификатыТекущегоДокумента КАК ВТ_ПодарочныеСертификатыТекущегоДокумента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПодарочныеСертификатыДругихДокументов КАК ВТ_ПодарочныеСертификатыДругихДокументов
		|		ПО ВТ_ПодарочныеСертификатыТекущегоДокумента.ПодарочныйСертификат = ВТ_ПодарочныеСертификатыДругихДокументов.ПодарочныйСертификат
		|ИТОГИ ПО
		|	Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;                                                                      
	
	ТекстСообщения = СтрШаблон(НСтр("ru = 'Внимание! Уже проведены другие документы ввода остатков по подарочным сертификатам из текущего документа:%1'"), Символы.ПС);
	
	ВыборкаСсылка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаСсылка.Следующий() Цикл
		ТекстСообщения = ТекстСообщения + Символы.ПС + ВыборкаСсылка.Ссылка;
	
		ВыборкаДетальныеЗаписи = ВыборкаСсылка.Выбрать();
	
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ТекстСообщения = ТекстСообщения + Символы.ПС + Символы.Таб + Символы.Таб + Символы.Таб + ВыборкаДетальныеЗаписи.ПодарочныйСертификат;
		КонецЦикла;
	КонецЦикла;
	
	ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, , , Отказ);
КонецПроцедуры

Процедура ПроверитьСрокиДействияИОстаткиСтоимостиПоСертификатам(Отказ)
	РеквизитыВидаПодарочныхСертификатов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидПодарочныхСертификатов, "Валюта, НоминальнаяСтоимость, СрокДействия");
	
	СтатусАктивирован = Перечисления.СтатусыПодарочныхСертификатов.Активирован;
	СтатусЧастичноИспользован = Перечисления.СтатусыПодарочныхСертификатов.ЧастичноИспользован;
	
	Для Каждого Строка Из ПодарочныеСертификаты Цикл
		Если (Строка.Статус = СтатусАктивирован ИЛИ Строка.Статус = СтатусЧастичноИспользован) И КонецДня(Строка.ДействуетДо) < Дата Тогда
			ОбщегоНазначения.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Строка %1: срок действия подарочного сертификата истек!'"), Строка.НомерСтроки), ЭтотОбъект, "ПодарочныеСертификаты[" + Формат(Строка.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].ДействуетДо", , Отказ);
		КонецЕсли;		
			
		Если Строка.Статус = СтатусАктивирован Тогда
			Если Строка.ОстатокСуммы <> РеквизитыВидаПодарочныхСертификатов.НоминальнаяСтоимость Тогда
				ОбщегоНазначения.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Строка %1: в случае активации подарочного сертификата остаток неиспользованной суммы должен быть строго равен номинальной стоимости (%2 %3)!'"), 
					Строка.НомерСтроки, РеквизитыВидаПодарочныхСертификатов.НоминальнаяСтоимость, РеквизитыВидаПодарочныхСертификатов.Валюта), ЭтотОбъект, "ПодарочныеСертификаты[" + Формат(Строка.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].ОстатокСуммы", , Отказ);
			КонецЕсли;		
			
		ИначеЕсли Строка.Статус = СтатусЧастичноИспользован Тогда
			Если Строка.ОстатокСуммы >= РеквизитыВидаПодарочныхСертификатов.НоминальнаяСтоимость Тогда
				ОбщегоНазначения.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Строка %1: в случае частичного использования подарочного сертификата остаток неиспользованной суммы должен быть строго меньше номинальной стоимости (%2 %3)!'"), 
					Строка.НомерСтроки, РеквизитыВидаПодарочныхСертификатов.НоминальнаяСтоимость, РеквизитыВидаПодарочныхСертификатов.Валюта), ЭтотОбъект, "ПодарочныеСертификаты[" + Формат(Строка.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].ОстатокСуммы", , Отказ);
			КонецЕсли;
			
		Иначе
			Если Строка.ОстатокСуммы > 0 Тогда
				ОбщегоНазначения.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Строка %1: в случае выпуска, полного погашения или возврата остаток неиспользованной суммы должен быть равен нулю!'"), Строка.НомерСтроки), 
						ЭтотОбъект, "ПодарочныеСертификаты[" + Формат(Строка.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].ОстатокСуммы", , Отказ);
				КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ПроверитьДопустимыеСтатусыПодарочныхСертификатов(Отказ)
	РеквизитыВидаПодарочныхСертификатов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидПодарочныхСертификатов, "Возвратный, МногократноеИспользование");
	
	СтатусВозвращен = Перечисления.СтатусыПодарочныхСертификатов.Возвращен;
	СтатусЧастичноИспользован = Перечисления.СтатусыПодарочныхСертификатов.ЧастичноИспользован;
	
	Для Каждого Строка Из ПодарочныеСертификаты Цикл
		Если Строка.Статус = СтатусВозвращен И НЕ РеквизитыВидаПодарочныхСертификатов.Возвратный Тогда
			ОбщегоНазначения.СообщитьПользователю(СтрШаблон(НСтр("ru = 'В строке %1 подарочный сертификат не является возвратным!'"), Строка.НомерСтроки), ЭтотОбъект, "ПодарочныеСертификаты[" + Формат(Строка.НомерСтроки - 1, "ЧГ=") + "].ПодарочныйСертификат", , Отказ);
		КонецЕсли;		
		Если Строка.Статус = СтатусЧастичноИспользован И НЕ РеквизитыВидаПодарочныхСертификатов.МногократноеИспользование Тогда
			ОбщегоНазначения.СообщитьПользователю(СтрШаблон(НСтр("ru = 'В строке %1 подарочный сертификат не допускает многократное использование!'"), Строка.НомерСтроки), ЭтотОбъект, "ПодарочныеСертификаты[" + Формат(Строка.НомерСтроки - 1, "ЧГ=") + "].ПодарочныйСертификат", , Отказ);
		КонецЕсли;		
	КонецЦикла;
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
    ПроверитьДублиВводовОстатковПоПодарочнымСертификатам(Отказ);
    ПроверитьСрокиДействияИОстаткиСтоимостиПоСертификатам(Отказ);
	ПроверитьДопустимыеСтатусыПодарочныхСертификатов(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Движения.ИсторияСтатусовПодарочныхСертификатов.Записывать = Истина;
	Движения.ПодарочныеСертификаты.Записывать = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВводОстатковПодарочныхСертификатовПодарочныеСертификаты.ПодарочныйСертификат КАК ПодарочныйСертификат,
		|	ВводОстатковПодарочныхСертификатовПодарочныеСертификаты.Статус КАК Статус,
		|	ВводОстатковПодарочныхСертификатовПодарочныеСертификаты.ОстатокСуммы КАК ОстатокСуммы,
		|	ВводОстатковПодарочныхСертификатовПодарочныеСертификаты.ДействуетДо КАК ДействуетДо
		|ИЗ
		|	Документ.ВводОстатковПодарочныхСертификатов.ПодарочныеСертификаты КАК ВводОстатковПодарочныхСертификатовПодарочныеСертификаты
		|ГДЕ
		|	ВводОстатковПодарочныхСертификатовПодарочныеСертификаты.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Движение = Движения.ИсторияСтатусовПодарочныхСертификатов.Добавить();
		Движение.Период = Дата;
		Движение.ПодарочныйСертификат = ВыборкаДетальныеЗаписи.ПодарочныйСертификат;
		Движение.Статус = ВыборкаДетальныеЗаписи.Статус;
		Движение.ДействуетДо = ВыборкаДетальныеЗаписи.ДействуетДо;
		Движение.Ответственный = Ответственный;
		
		Если ВыборкаДетальныеЗаписи.ОстатокСуммы > 0 Тогда
			Движение = Движения.ПодарочныеСертификаты.Добавить();
			Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
			Движение.Период = Дата;
			Движение.ПодарочныйСертификат = ВыборкаДетальныеЗаписи.ПодарочныйСертификат;
			Движение.Сумма = ВыборкаДетальныеЗаписи.ОстатокСуммы;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#КонецЕсли