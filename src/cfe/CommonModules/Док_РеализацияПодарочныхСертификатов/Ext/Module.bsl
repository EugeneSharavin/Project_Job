
#Область ПрограммныйИнтерфейс

Процедура ИсполняемыеСценарии() Экспорт
    
    ЮТТесты
		.ДобавитьТестовыйНабор("Документ ""Реализация подарочных сертификатов"": Проверка проведения и отмены проведения").ВТранзакции()
			.ДобавитьТест("РеализацияПодарочныхСертификатовПроверкаЗаписиПроведенияОтменыПроведенияБезОшибок")
			.ДобавитьТест("РеализацияПодарочныхСертификатовПроверкаПроведенияСОшибкамиДублированиеПодарочныхСертификатов")
			.ДобавитьТест("РеализацияПодарочныхСертификатовПроверкаПроведенияСОшибкамиРеализацияПодарочныхСертификатовНедействующегоВида")
			.ДобавитьТест("РеализацияПодарочныхСертификатовПроверкаПроведенияСОшибкамиПовторнаяАктивация")
			.ДобавитьТест("РеализацияПодарочныхСертификатовПроверкаОтменыПроведенияСОшибками")
		;
	
КонецПроцедуры

Процедура ПередВсемиТестами() Экспорт
	
	Общ_Инициализация.ВыполнитьИнициализациюДанных();
	
КонецПроцедуры

Процедура РеализацияПодарочныхСертификатовПроверкаЗаписиПроведенияОтменыПроведенияБезОшибок(СОтменойПроведения = Истина) Экспорт
	
	// Описание программного создания: https://bia-technologies.github.io/yaxunit/docs/features/test-data/data-generation/
	
	//Сгенерируем необходимые виды и подарочные сертификаты
	Спр_ПодарочныеСертификаты.ПроверкаАвтоматическойГенерацииПодарочныхСертификатов();
	
	ПодарочныеСертификаты = Новый Массив;
	
	ВыборкаПодарочныхСертификатов = Справочники.ПодарочныеСертификаты.Выбрать();
	
	ОжидаемыйОстатокСтоимости = 0;
	
	Пока ВыборкаПодарочныхСертификатов.Следующий() Цикл
		ПодарочныеСертификаты.Добавить(ВыборкаПодарочныхСертификатов.Ссылка);
		ОжидаемыйОстатокСтоимости = ОжидаемыйОстатокСтоимости + ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыборкаПодарочныхСертификатов.Ссылка, "Владелец.НоминальнаяСтоимость");
	КонецЦикла;
	
	КонструкторРеализации = ЮТест.Данные().КонструкторОбъекта("Документы.РеализацияПодарочныхСертификатов")
		.Установить("Дата", ТекущаяДатаСеанса() + 2)
		.Установить("Ответственный", Пользователи.ТекущийПользователь())
		.ТабличнаяЧасть("ПодарочныеСертификаты")
			.ДобавитьСтроку()
				.Установить("ПодарочныйСертификат", ПодарочныеСертификаты[0])
			.ДобавитьСтроку()
				.Установить("ПодарочныйСертификат", ПодарочныеСертификаты[1])
			.ДобавитьСтроку()
				.Установить("ПодарочныйСертификат", ПодарочныеСертификаты[2])
			.ДобавитьСтроку()
				.Установить("ПодарочныйСертификат", ПодарочныеСертификаты[3])
			.ДобавитьСтроку()
				.Установить("ПодарочныйСертификат", ПодарочныеСертификаты[4])
			.ДобавитьСтроку()
				.Установить("ПодарочныйСертификат", ПодарочныеСертификаты[5])
			.ДобавитьСтроку()
				.Установить("ПодарочныйСертификат", ПодарочныеСертификаты[6])
			.ДобавитьСтроку()
				.Установить("ПодарочныйСертификат", ПодарочныеСертификаты[7])
			.ДобавитьСтроку()
				.Установить("ПодарочныйСертификат", ПодарочныеСертификаты[8])
			.ДобавитьСтроку()
				.Установить("ПодарочныйСертификат", ПодарочныеСертификаты[9])
			.ДобавитьСтроку()
				.Установить("ПодарочныйСертификат", ПодарочныеСертификаты[10])
			.ДобавитьСтроку()
				.Установить("ПодарочныйСертификат", ПодарочныеСертификаты[11])
			.ДобавитьСтроку()
				.Установить("ПодарочныйСертификат", ПодарочныеСертификаты[12])
			.ДобавитьСтроку()
				.Установить("ПодарочныйСертификат", ПодарочныеСертификаты[13])
			.ДобавитьСтроку()
				.Установить("ПодарочныйСертификат", ПодарочныеСертификаты[14])
			.ДобавитьСтроку()
				.Установить("ПодарочныйСертификат", ПодарочныеСертификаты[15])
			.ДобавитьСтроку()
				.Установить("ПодарочныйСертификат", ПодарочныеСертификаты[16])
			.ДобавитьСтроку()
				.Установить("ПодарочныйСертификат", ПодарочныеСертификаты[17])
			.ДобавитьСтроку()
				.Установить("ПодарочныйСертификат", ПодарочныеСертификаты[18])
			.ДобавитьСтроку()
				.Установить("ПодарочныйСертификат", ПодарочныеСертификаты[19])
		;
	
	Реализация = КонструкторРеализации.Записать();  
			
	ЮТест.ОжидаетЧто(Реализация.ПолучитьОбъект())  
		.Метод("Записать").Параметр(РежимЗаписиДокумента.Проведение)   
		.НеВыбрасываетИсключение()	
		;
		
	Рег_ПроверкиЗаписейВРегистрах.ИсторияСтатусовПодарочныхСертификатовПроверкаНаличия(Реализация, Перечисления.СтатусыПодарочныхСертификатов.Активирован, 20);
	Рег_ПроверкиЗаписейВРегистрах.ОстаткиСтоимостиПодарочныхСертификатовПроверкаНаличия(Реализация, 20, ОжидаемыйОстатокСтоимости);

	Если СОтменойПроведения Тогда
		ЮТест.ОжидаетЧто(Реализация.ПолучитьОбъект())  
			.Метод("Записать").Параметр(РежимЗаписиДокумента.ОтменаПроведения)   
			.НеВыбрасываетИсключение()	
			;
			
		Рег_ПроверкиЗаписейВРегистрах.ИсторияСтатусовПодарочныхСертификатовПроверкаНаличия(Реализация);
		Рег_ПроверкиЗаписейВРегистрах.ОстаткиСтоимостиПодарочныхСертификатовПроверкаНаличия(Реализация);
	КонецЕсли;
	
КонецПроцедуры

Процедура РеализацияПодарочныхСертификатовПроверкаПроведенияСОшибкамиДублированиеПодарочныхСертификатов() Экспорт
	
	// Описание программного создания: https://bia-technologies.github.io/yaxunit/docs/features/test-data/data-generation/
	
	//Сгенерируем необходимые виды и подарочные сертификаты
	Спр_ПодарочныеСертификаты.ПроверкаАвтоматическойГенерацииПодарочныхСертификатов();
	
	ПодарочныеСертификаты = Новый Массив;
	
	ВыборкаПодарочныхСертификатов = Справочники.ПодарочныеСертификаты.Выбрать();
	
	Если ВыборкаПодарочныхСертификатов.Следующий() Тогда
		ПодарочныеСертификаты.Добавить(ВыборкаПодарочныхСертификатов.Ссылка);
	КонецЕсли;
	
	КонструкторРеализации = ЮТест.Данные().КонструкторОбъекта("Документы.РеализацияПодарочныхСертификатов")
		.Установить("Дата", ТекущаяДатаСеанса() + 2)
		.Установить("Ответственный", Пользователи.ТекущийПользователь())
		.ТабличнаяЧасть("ПодарочныеСертификаты")
			.ДобавитьСтроку()
				.Установить("ПодарочныйСертификат", ПодарочныеСертификаты[0])
			.ДобавитьСтроку()
				.Установить("ПодарочныйСертификат", ПодарочныеСертификаты[0])
		;
	
	Реализация = КонструкторРеализации.Записать();  
			
	ЮТест.ОжидаетЧто(Реализация.ПолучитьОбъект())  
		.Метод("Записать").Параметр(РежимЗаписиДокумента.Проведение)   
		.ВыбрасываетИсключение("Не удалось провести ""Реализация подарочных сертификатов")	
		;
		
	Сообщения = ПолучитьСообщенияПользователю();
	ЮТест.ОжидаетЧто(Сообщения)
		.ИмеетТип("ФиксированныйМассив")
		.ИмеетДлину(1)
		.Свойство("[0].Текст")
			.Содержит(НСтр("ru = 'В строке 2 подарочный сертификат указан повторно!'"))
		;
				
КонецПроцедуры

Процедура РеализацияПодарочныхСертификатовПроверкаПроведенияСОшибкамиРеализацияПодарочныхСертификатовНедействующегоВида() Экспорт
	
	// Описание программного создания: https://bia-technologies.github.io/yaxunit/docs/features/test-data/data-generation/
	
	//Сначала сгенерируем необходимый вид подарочных сертификатов (создадим только один вид подарочных сертификатов)

	//Получаем ссылку на валюту "Российский рубль" из контекста набора тестов
	ВалютаRUB = ЮТест.Контекст().Значение("ВалютаRUB");

	ВидПодарочныхСертификатов = Спр_ВидыПодарочныхСертификатов.СгенерироватьВидПодарочныхСертификатов("Новогодний", 5000, ВалютаRUB, 12, Истина, Истина, "99 9999");
	
	//Далее сгенерируем необходимые подарочные сертификаты
	Спр_ПодарочныеСертификаты.ПроверкаАвтоматическойГенерацииПодарочныхСертификатов(ВидПодарочныхСертификатов);
	
	ПодарочныеСертификаты = Новый Массив;
	
	ВыборкаПодарочныхСертификатов = Справочники.ПодарочныеСертификаты.Выбрать(, ВидПодарочныхСертификатов);
	
	Пока ВыборкаПодарочныхСертификатов.Следующий() Цикл
		ПодарочныеСертификаты.Добавить(ВыборкаПодарочныхСертификатов.Ссылка);
	КонецЦикла;
	
	//Отключим действие вида подарочных сертификатов
	ВидПодарочныхСертификатовОбъект = ВидПодарочныхСертификатов.ПолучитьОбъект();
	ВидПодарочныхСертификатовОбъект.Действует = Ложь;
	ВидПодарочныхСертификатовОбъект.Записать();
			
	//Проверка повотрной активации ранее активированного сертификата (по сути, дублирование документов по одному сертификату)
	КонструкторРеализации = ЮТест.Данные().КонструкторОбъекта("Документы.РеализацияПодарочныхСертификатов")
		.Установить("Дата", ТекущаяДатаСеанса() + 2)
		.Установить("Ответственный", Пользователи.ТекущийПользователь())
		.ТабличнаяЧасть("ПодарочныеСертификаты")
			.ДобавитьСтроку()
				.Установить("ПодарочныйСертификат", ПодарочныеСертификаты[0])
		;
	
	Реализация = КонструкторРеализации.Записать();  
		
	ЮТест.ОжидаетЧто(Реализация.ПолучитьОбъект())  
		.Метод("Записать").Параметр(РежимЗаписиДокумента.Проведение)   
		.ВыбрасываетИсключение("Не удалось провести ""Реализация подарочных сертификатов")	
		;

	Сообщения = ПолучитьСообщенияПользователю();
	ЮТест.ОжидаетЧто(Сообщения)
		.ИмеетТип("ФиксированныйМассив")
		.ИмеетДлину(1)
		.Свойство("[0].Текст")
			.Содержит(НСтр("ru = 'В строке 1 указан подарочный сертификат недействующего вида!'"))
		;
		
КонецПроцедуры

Процедура РеализацияПодарочныхСертификатовПроверкаПроведенияСОшибкамиПовторнаяАктивация() Экспорт
	
	// Описание программного создания: https://bia-technologies.github.io/yaxunit/docs/features/test-data/data-generation/
	
	//Сгенерируем необходимые виды и подарочные сертификаты
	Спр_ПодарочныеСертификаты.ПроверкаАвтоматическойГенерацииПодарочныхСертификатов();
	
	ПодарочныеСертификаты = Новый Массив;
	
	ВыборкаПодарочныхСертификатов = Справочники.ПодарочныеСертификаты.Выбрать();
	
	Если ВыборкаПодарочныхСертификатов.Следующий() Тогда
		ПодарочныеСертификаты.Добавить(ВыборкаПодарочныхСертификатов.Ссылка);
	КонецЕсли;
			
	//Проверка повотрной активации ранее активированного сертификата (по сути, дублирование документов по одному сертификату)
	КонструкторРеализации = ЮТест.Данные().КонструкторОбъекта("Документы.РеализацияПодарочныхСертификатов")
		.Установить("Дата", ТекущаяДатаСеанса() + 2)
		.Установить("Ответственный", Пользователи.ТекущийПользователь())
		.ТабличнаяЧасть("ПодарочныеСертификаты")
			.ДобавитьСтроку()
				.Установить("ПодарочныйСертификат", ПодарочныеСертификаты[0])
		;
	
	Реализация = КонструкторРеализации.Записать();  
		
	ЮТест.ОжидаетЧто(Реализация.ПолучитьОбъект())  
		.Метод("Записать").Параметр(РежимЗаписиДокумента.Проведение)   
		.НеВыбрасываетИсключение()	
		;

	КонструкторРеализации = ЮТест.Данные().КонструкторОбъекта("Документы.РеализацияПодарочныхСертификатов")
		.Установить("Дата", ТекущаяДатаСеанса() + 2)
		.Установить("Ответственный", Пользователи.ТекущийПользователь())
		.ТабличнаяЧасть("ПодарочныеСертификаты")
			.ДобавитьСтроку()
				.Установить("ПодарочныйСертификат", ПодарочныеСертификаты[0])
		;
	
	Реализация = КонструкторРеализации.Записать();  
		
	ЮТест.ОжидаетЧто(Реализация.ПолучитьОбъект())  
		.Метод("Записать").Параметр(РежимЗаписиДокумента.Проведение)   
		.ВыбрасываетИсключение("Не удалось провести ""Реализация подарочных сертификатов")	
		;

	Сообщения = ПолучитьСообщенияПользователю();
	ЮТест.ОжидаетЧто(Сообщения)
		.ИмеетТип("ФиксированныйМассив")
		.ИмеетДлину(1)
		.Свойство("[0].Текст")
			.Содержит(НСтр("ru = 'В строке 1 подарочный сертификат уже был активирован!'"))
		;
		
КонецПроцедуры

Процедура РеализацияПодарочныхСертификатовПроверкаОтменыПроведенияСОшибками() Экспорт
	
	// Описание программного создания: https://bia-technologies.github.io/yaxunit/docs/features/test-data/data-generation/

	//Сгенерируем и проведем документ реализации товаров с оплатой подарочными сертификатами
	//(а он уже по цепочке создаст и проведет документ реализации подарочных сертификатов)
    Док_РеализацияТоваровОплатаПодарочнымиСертификатами._ДемоРеализацияТоваровПроверкаЗаписиПроведенияОтменыПроведенияБезОшибок(Ложь);
	
	Выборка = Документы.РеализацияПодарочныхСертификатов.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЮТест.ОжидаетЧто(Выборка.ПолучитьОбъект())  
			.Метод("Записать").Параметр(РежимЗаписиДокумента.ОтменаПроведения)   
			.ВыбрасываетИсключение("Не удалось сделать непроведенным ""Реализация подарочных сертификатов")	
			;
				
	КонецЕсли;                                               

	Сообщения = ПолучитьСообщенияПользователю();
	ЮТест.ОжидаетЧто(Сообщения)
		.ИмеетТип("ФиксированныйМассив")
		.ИмеетДлину(6)
		.Свойство("[0].Текст")
			.Содержит(НСтр("ru = 'В строке 6 с подарочным сертификатом проведена дальнейшая операция!'"))
		.Свойство("[1].Текст")
			.Содержит(НСтр("ru = 'В строке 8 с подарочным сертификатом проведена дальнейшая операция!'"))
		.Свойство("[2].Текст")
			.Содержит(НСтр("ru = 'В строке 9 с подарочным сертификатом проведена дальнейшая операция!'"))
		.Свойство("[3].Текст")
			.Содержит(НСтр("ru = 'В строке 12 с подарочным сертификатом проведена дальнейшая операция!'"))
		.Свойство("[4].Текст")
			.Содержит(НСтр("ru = 'В строке 15 с подарочным сертификатом проведена дальнейшая операция!'"))
		.Свойство("[5].Текст")
			.Содержит(НСтр("ru = 'Невозможно отменить проведение документа!'"))
		;
	
КонецПроцедуры

#КонецОбласти

