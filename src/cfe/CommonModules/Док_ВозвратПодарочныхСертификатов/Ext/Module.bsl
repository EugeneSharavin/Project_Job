
#Область ПрограммныйИнтерфейс

Процедура ИсполняемыеСценарии() Экспорт
    
    ЮТТесты
		.ДобавитьТестовыйНабор("Документ ""Возврат подарочных сертификатов"": Проверка проведения и отмены проведения").ВТранзакции()
			.ДобавитьТест("ВозвратПодарочныхСертификатовПроверкаЗаписиПроведенияОтменыПроведенияБезОшибок")
			.ДобавитьТест("ВозвратПодарочныхСертификатовПроверкаПроведенияСОшибкамиНеВозвратныйСертификат")
			.ДобавитьТест("ВозвратПодарочныхСертификатовПроверкаПроведенияСОшибкамиНедопустимыйСтатус")
			.ДобавитьТест("ВозвратПодарочныхСертификатовПроверкаОтменыПроведенияСОшибками")
		;
	
КонецПроцедуры

Процедура ПередВсемиТестами() Экспорт
	
	Общ_Инициализация.ВыполнитьИнициализациюДанных();
	
КонецПроцедуры

Процедура ВозвратПодарочныхСертификатовПроверкаЗаписиПроведенияОтменыПроведенияБезОшибок(СОтменойПроведения = Истина) Экспорт
	
	// Описание программного создания: https://bia-technologies.github.io/yaxunit/docs/features/test-data/data-generation/
	
	//Сгенерируем необходимые виды и подарочные сертификаты, а также выпуск и реализацию товаров клиента (частичное погашение сертификата)
	Док_РеализацияТоваровОплатаПодарочнымиСертификатами._ДемоРеализацияТоваровПроверкаЗаписиПроведенияОтменыПроведенияБезОшибок(Ложь);
	
	//Выберем сертификаты, УПОРЯДОЧИВАЯ ПО КОДУ! Это важно, так как вызванный выше тест документа "_ДемоРеализацияТоваров" также выбирает сертификаты, упорядоченные по коду
	//соответственно мы уверены в том, что именно первые 4 из 5 использованы для оплаты, а 5-й не использовался (статус "Активирован")
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 5
		|	ПодарочныеСертификаты.Ссылка КАК Ссылка,
		|	1 КАК Приоритет,
		|	ПодарочныеСертификаты.Код КАК Код
		|ИЗ
		|	Справочник.ПодарочныеСертификаты КАК ПодарочныеСертификаты
		|ГДЕ
		|	ПодарочныеСертификаты.Владелец.НоминальнаяСтоимость = 1000
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПодарочныеСертификаты.Ссылка,
		|	2,
		|	ПодарочныеСертификаты.Код КАК Код
		|ИЗ
		|	Справочник.ПодарочныеСертификаты КАК ПодарочныеСертификаты
		|ГДЕ
		|	ПодарочныеСертификаты.Владелец.НоминальнаяСтоимость = 3000
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет, Код";
	
	РезультатЗапроса = Запрос.Выполнить();
	ПодарочныеСертификаты = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	КонструкторВозврата = ЮТест.Данные().КонструкторОбъекта("Документы.ВозвратПодарочныхСертификатов")
		.Установить("Дата", ТекущаяДатаСеанса() + 4)
		.Установить("Ответственный", Пользователи.ТекущийПользователь())
		.ТабличнаяЧасть("ПодарочныеСертификаты")
			.ДобавитьСтроку()
				.Установить("ПодарочныйСертификат", ПодарочныеСертификаты[4])   //добавляем 5-й неиспользованный
			.ДобавитьСтроку()
				.Установить("ПодарочныйСертификат", ПодарочныеСертификаты[5])
		;
	
	ВозвратСертификатов = КонструкторВозврата.Записать();  
			
	ЮТест.ОжидаетЧто(ВозвратСертификатов.ПолучитьОбъект())  
		.Метод("Записать").Параметр(РежимЗаписиДокумента.Проведение)   
		.НеВыбрасываетИсключение()	
		;
		
	Рег_ПроверкиЗаписейВРегистрах.ИсторияСтатусовПодарочныхСертификатовПроверкаНаличия(ВозвратСертификатов, Перечисления.СтатусыПодарочныхСертификатов.Возвращен, 2);
	
	ОжидаемыйОстатокСтоимости = 3000;	//один сертификат на 1000 активирован и у сертификата на 3000 осталось 2000 (после частичной оплаты 1000)
	Рег_ПроверкиЗаписейВРегистрах.ОстаткиСтоимостиПодарочныхСертификатовПроверкаНаличия(ВозвратСертификатов, 2, ОжидаемыйОстатокСтоимости);
	
	Если СОтменойПроведения Тогда
		ЮТест.ОжидаетЧто(ВозвратСертификатов.ПолучитьОбъект())  
			.Метод("Записать").Параметр(РежимЗаписиДокумента.ОтменаПроведения)   
			.НеВыбрасываетИсключение()	
			;
			
		Рег_ПроверкиЗаписейВРегистрах.ИсторияСтатусовПодарочныхСертификатовПроверкаНаличия(ВозвратСертификатов);
		Рег_ПроверкиЗаписейВРегистрах.ОстаткиСтоимостиПодарочныхСертификатовПроверкаНаличия(ВозвратСертификатов);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВозвратПодарочныхСертификатовПроверкаПроведенияСОшибкамиНеВозвратныйСертификат() Экспорт
	
	// Описание программного создания: https://bia-technologies.github.io/yaxunit/docs/features/test-data/data-generation/
	
	//Сгенерируем необходимые виды и подарочные сертификаты, а также выпуск и реализацию товаров клиента (частичное погашение сертификата)
	Док_РеализацияПодарочныхСертификатов.РеализацияПодарочныхСертификатовПроверкаЗаписиПроведенияОтменыПроведенияБезОшибок(Ложь);
	
	//Выберем любой два невозвратных сертификата (номиналом 500 рублей и 2000 рублей)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПодарочныеСертификаты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПодарочныеСертификаты КАК ПодарочныеСертификаты
		|ГДЕ
		|	ПодарочныеСертификаты.Владелец.НоминальнаяСтоимость = 500
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПодарочныеСертификаты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПодарочныеСертификаты КАК ПодарочныеСертификаты
		|ГДЕ
		|	ПодарочныеСертификаты.Владелец.НоминальнаяСтоимость = 2000";
	
	РезультатЗапроса = Запрос.Выполнить();
	ПодарочныеСертификаты = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	КонструкторВозврата = ЮТест.Данные().КонструкторОбъекта("Документы.ВозвратПодарочныхСертификатов")
		.Установить("Дата", ТекущаяДатаСеанса() + 4)
		.Установить("Ответственный", Пользователи.ТекущийПользователь())
		.ТабличнаяЧасть("ПодарочныеСертификаты")
			.ДобавитьСтроку()
				.Установить("ПодарочныйСертификат", ПодарочныеСертификаты[0])
			.ДобавитьСтроку()
				.Установить("ПодарочныйСертификат", ПодарочныеСертификаты[1])
		;
	
	ВозвратСертификатов = КонструкторВозврата.Записать();  
			
	ЮТест.ОжидаетЧто(ВозвратСертификатов.ПолучитьОбъект())  
		.Метод("Записать").Параметр(РежимЗаписиДокумента.Проведение)   
		.ВыбрасываетИсключение("Не удалось провести ""Возврат подарочных сертификатов")	
		;
		
	Сообщения = ПолучитьСообщенияПользователю();
	ЮТест.ОжидаетЧто(Сообщения)
		.ИмеетТип("ФиксированныйМассив")
		.ИмеетДлину(2)
		.Свойство("[0].Текст")
			.Содержит(НСтр("ru = 'В строке 1 подарочный сертификат не является возвратным!'"))
		.Свойство("[1].Текст")
			.Содержит(НСтр("ru = 'В строке 2 подарочный сертификат не является возвратным!'"))
		;
	
КонецПроцедуры

Процедура ВозвратПодарочныхСертификатовПроверкаПроведенияСОшибкамиНедопустимыйСтатус() Экспорт
	
	// Описание программного создания: https://bia-technologies.github.io/yaxunit/docs/features/test-data/data-generation/
	
	//Сгенерируем необходимые виды и подарочные сертификаты, а также выпуск и реализацию товаров клиента (частичное погашение сертификата)
	Док_РеализацияТоваровОплатаПодарочнымиСертификатами._ДемоРеализацияТоваровПроверкаЗаписиПроведенияОтменыПроведенияБезОшибок(Ложь);
	
	//Всего выпущено и активировано 5 сертификатов номиналом 1000 рублей, ПЕРВЫЕ 4 из них (если отсортировать по коду) мы использовали для оплаты в реализации, 
	//соответственно, любой из них вернуть нельзя 
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 4
		|	ПодарочныеСертификаты.Ссылка КАК Ссылка,
		|	ПодарочныеСертификаты.Код КАК Код
		|ИЗ
		|	Справочник.ПодарочныеСертификаты КАК ПодарочныеСертификаты
		|ГДЕ
		|	ПодарочныеСертификаты.Владелец.НоминальнаяСтоимость = 1000
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПодарочныеСертификаты.Код";
	
	РезультатЗапроса = Запрос.Выполнить();
	ПодарочныеСертификаты = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	КонструкторВозврата = ЮТест.Данные().КонструкторОбъекта("Документы.ВозвратПодарочныхСертификатов")
		.Установить("Дата", ТекущаяДатаСеанса() + 4)
		.Установить("Ответственный", Пользователи.ТекущийПользователь())
		.ТабличнаяЧасть("ПодарочныеСертификаты")
			.ДобавитьСтроку()
				.Установить("ПодарочныйСертификат", ПодарочныеСертификаты[0])
		;
	
	ВозвратСертификатов = КонструкторВозврата.Записать();  
			
	ЮТест.ОжидаетЧто(ВозвратСертификатов.ПолучитьОбъект())  
		.Метод("Записать").Параметр(РежимЗаписиДокумента.Проведение)   
		.ВыбрасываетИсключение("Не удалось провести ""Возврат подарочных сертификатов")	
		;
		
	Сообщения = ПолучитьСообщенияПользователю();
	ЮТест.ОжидаетЧто(Сообщения)
		.ИмеетТип("ФиксированныйМассив")
		.ИмеетДлину(1)
		.Свойство("[0].Текст")
			.Содержит(НСтр("ru = 'В строке 1 подарочный сертификат не был активирован ранее (или уже полностью использован)!'"))
		;
	
КонецПроцедуры

Процедура ВозвратПодарочныхСертификатовПроверкаОтменыПроведенияСОшибками() Экспорт
	
	// Описание программного создания: https://bia-technologies.github.io/yaxunit/docs/features/test-data/data-generation/
	
	//Сгенерируем документ возврата подарочных сертификатов
	Док_ВозвратПодарочныхСертификатов.ВозвратПодарочныхСертификатовПроверкаЗаписиПроведенияОтменыПроведенияБезОшибок(Ложь);

	//Сгенерируем и проведем документ аннулирования подарочных сертификатов (а он при заполнении должен подхватить сертификаты из нашего возврата)
	КонструкторАннулирования = ЮТест.Данные().КонструкторОбъекта("Документы.АннулированиеПодарочныхСертификатов")
		.Установить("Дата", ТекущаяДатаСеанса() + 5)
		.Установить("Ответственный", Пользователи.ТекущийПользователь())
		;
	
	АннулированиеСертификатовОбъект = КонструкторАннулирования.НовыйОбъект();
	АннулированиеСертификатовОбъект.ЗаполнитьПодарочныеСертификаты();
	
	ЮТест.ОжидаетЧто(АннулированиеСертификатовОбъект)  
		.Метод("Записать").Параметр(РежимЗаписиДокумента.Проведение)   
		.НеВыбрасываетИсключение()	
		;
		
	Выборка = Документы.ВозвратПодарочныхСертификатов.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЮТест.ОжидаетЧто(Выборка.ПолучитьОбъект())  
			.Метод("Записать").Параметр(РежимЗаписиДокумента.ОтменаПроведения)   
			.ВыбрасываетИсключение("Не удалось сделать непроведенным ""Возврат подарочных сертификатов")	
			;
				
	КонецЕсли;                                               

	Сообщения = ПолучитьСообщенияПользователю();
	ЮТест.ОжидаетЧто(Сообщения)
		.ИмеетТип("ФиксированныйМассив")
		.ИмеетДлину(3)
		.Свойство("[0].Текст")
			.Содержит(НСтр("ru = 'В строке 1 с подарочным сертификатом проведена дальнейшая операция!'"))
		.Свойство("[1].Текст")
			.Содержит(НСтр("ru = 'В строке 2 с подарочным сертификатом проведена дальнейшая операция!'"))
		.Свойство("[2].Текст")
			.Содержит(НСтр("ru = 'Невозможно отменить проведение документа!'"))
		;
	
КонецПроцедуры

#КонецОбласти

