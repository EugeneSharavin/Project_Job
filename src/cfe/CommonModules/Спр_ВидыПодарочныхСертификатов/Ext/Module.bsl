
#Область ПрограммныйИнтерфейс

Процедура ИсполняемыеСценарии() Экспорт
    
    ЮТТесты.ДобавитьТестовыйНабор("Справочник ""Виды подарочных сертификатов"": Проверка создания").ВТранзакции()
		.ДобавитьТест("ПроверкаСозданияВидовПодарочныхСертификатов")
		.ДобавитьТест("ПроверкаСозданияВидовПодарочныхСертификатовСОшибкой")
		;

КонецПроцедуры

Процедура ПередВсемиТестами() Экспорт
	
	Общ_Инициализация.ВыполнитьИнициализациюДанных();
	
КонецПроцедуры

Процедура ПроверкаСозданияВидовПодарочныхСертификатов() Экспорт
	
	// Описание программного создания: https://bia-technologies.github.io/yaxunit/docs/features/test-data/data-generation/
		
	//Получаем ссылку на валюту "Российский рубль" из контекста набора тестов
	ВалютаRUB = ЮТест.Контекст().Значение("ВалютаRUB");
	
	//Генерируем вид подарочных сертификатов - невозвратный, однократный
	СгенерироватьВидПодарочныхСертификатов("500 RUB (6 мес, невозвратный, однократный)", 500, ВалютаRUB, 6, Ложь, Ложь, "99 99 99999"); 

	//Генерируем вид подарочных сертификатов - возвратный, однократный
	СгенерироватьВидПодарочныхСертификатов("1 000,00 RUB (12 мес, возвратный, однократный)", 1000, ВалютаRUB, 12, Истина, Ложь, "99 99 9999"); 

	//Генерируем вид подарочных сертификатов - невозвратный, многократный
	СгенерироватьВидПодарочныхСертификатов("2 000 RUB (12 мес, невозвратный, многократный)", 2000, ВалютаRUB, 12, Ложь, Истина, "99 99 9999"); 

	//Генерируем вид подарочных сертификатов - возвратный, многократный
	СгенерироватьВидПодарочныхСертификатов("3 000 RUB (24 мес, невозвратный, многократный)", 3000, ВалютаRUB, 24, Истина, Истина, "99 99 9999"); 
		
КонецПроцедуры

Процедура ПроверкаСозданияВидовПодарочныхСертификатовСОшибкой() Экспорт
	
	// Описание программного создания: https://bia-technologies.github.io/yaxunit/docs/features/test-data/data-generation/
	
	//Получаем ссылку на валюту "Российский рубль" из контекста набора тестов
	ВалютаRUB = ЮТест.Контекст().Значение("ВалютаRUB");
	
	//Зададим некорректный шаблон номера
	ШаблонНомера = "прпарвдл";
	
	КонструкторВидаПодарочныхСертификатов = ЮТест.Данные().КонструкторОбъекта("Справочники.ВидыПодарочныхСертификатов")
		.Установить("Действует", Истина)
		.Установить("Наименование", "Некорректный шаблон номера")
		.Установить("НоминальнаяСтоимость", 500)
		.Установить("Валюта", ВалютаRUB)
		.Установить("СрокДействия", 1)
		.Установить("ШаблонНомера", ШаблонНомера)
		;
		
	ЮТест.ОжидаетЧто(КонструкторВидаПодарочныхСертификатов)
		.Метод("Записать")   
		.ВыбрасываетИсключение("Не удалось записать: ""Вид подарочных сертификатов")	
		;

	Сообщения = ПолучитьСообщенияПользователю();
	ЮТест.ОжидаетЧто(Сообщения)
		.ИмеетТип("ФиксированныйМассив")
		.ИмеетДлину(1)
		.Свойство("[0].Текст")
			.Содержит(НСтр("ru = 'Шаблон номеров подарочных сертификатов может содержать только цифровые символы и пробелы!'"))
		;
		
КонецПроцедуры

Функция СгенерироватьВидПодарочныхСертификатов(Наименование, НоминальнаяСтоимость, Валюта, СрокДействия, Возвратный, МногократноеИспользование, ШаблонНомера) Экспорт 
	
	//Генерируем вид подарочных сертификатов
	КонструкторВидаПодарочныхСертификатов = ЮТест.Данные().КонструкторОбъекта("Справочники.ВидыПодарочныхСертификатов")
		.Установить("Действует", Истина)
		.Установить("Наименование", Наименование)
		.Установить("НоминальнаяСтоимость", НоминальнаяСтоимость)
		.Установить("Валюта", Валюта)
		.Установить("СрокДействия", СрокДействия)
		.Установить("Возвратный", Возвратный)
		.Установить("МногократноеИспользование", МногократноеИспользование)
		.Установить("ШаблонНомера", ШаблонНомера)
		;
		
	//Получаем ссылку на сгенерированный вид подарочных сертификатов
	ВидПодарочныхСертификатов = КонструкторВидаПодарочныхСертификатов.Записать();
	
	//Проверяем
	ЮТест.ОжидаетЧто(ВидПодарочныхСертификатов.ПолучитьОбъект())
		.Метод("Записать")   
		.НеВыбрасываетИсключение()	
		;
		
	ВидыПодарочныхСертификатовПроверкаНаличия(Наименование, НоминальнаяСтоимость, Валюта, СрокДействия, Возвратный, МногократноеИспользование, ШаблонНомера);
	
	Возврат ВидПодарочныхСертификатов;
	
КонецФункции
	
Процедура ВидыПодарочныхСертификатовПроверкаНаличия(Наименование, НоминальнаяСтоимость, Валюта, СрокДействия, Возвратный, МногократноеИспользование, ШаблонНомера) Экспорт
	
	ОписаниеЗапроса = ЮТЗапросы.ОписаниеЗапроса();
	
	ОписаниеЗапроса.ИмяТаблицы = "Справочник.ВидыПодарочныхСертификатов";
	
	ОписаниеЗапроса.Условия.Добавить("Действует = ИСТИНА");
	ОписаниеЗапроса.Условия.Добавить("Наименование = &Наименование");
	ОписаниеЗапроса.Условия.Добавить("НоминальнаяСтоимость = &НоминальнаяСтоимость");
	ОписаниеЗапроса.Условия.Добавить("Валюта = &Валюта");
	ОписаниеЗапроса.Условия.Добавить("СрокДействия = &СрокДействия");
	ОписаниеЗапроса.Условия.Добавить("Возвратный = &Возвратный");
	ОписаниеЗапроса.Условия.Добавить("МногократноеИспользование = &МногократноеИспользование");
	ОписаниеЗапроса.Условия.Добавить("ШаблонНомера = &ШаблонНомера");
	
	ОписаниеЗапроса.ЗначенияПараметров.Вставить("Наименование", Наименование);
	ОписаниеЗапроса.ЗначенияПараметров.Вставить("НоминальнаяСтоимость", НоминальнаяСтоимость);
	ОписаниеЗапроса.ЗначенияПараметров.Вставить("Валюта", Валюта);
	ОписаниеЗапроса.ЗначенияПараметров.Вставить("СрокДействия", СрокДействия);
	ОписаниеЗапроса.ЗначенияПараметров.Вставить("Возвратный", Возвратный);
	ОписаниеЗапроса.ЗначенияПараметров.Вставить("МногократноеИспользование", МногократноеИспользование);
	ОписаниеЗапроса.ЗначенияПараметров.Вставить("ШаблонНомера", ШаблонНомера);
	
	ОписаниеЗапроса.ВыбираемыеПоля.Добавить("КОЛИЧЕСТВО(*) КАК КоличествоЭлементов");

	ЮТест.ОжидаетЧто(ЮТЗапросы.РезультатЗапроса(ОписаниеЗапроса))
	    .ИмеетДлину(1)
	    .Свойство("[0].КоличествоЭлементов").Равно(1);
		
КонецПроцедуры

#КонецОбласти

