
#Область ПрограммныйИнтерфейс

Процедура ИсполняемыеСценарии() Экспорт
    
    ЮТТесты
		.ДобавитьТестовыйНабор("Документ ""Демо: Реализация товаров"": Проверка проведения и отмены проведения").ВТранзакции()
			.ДобавитьТест("_ДемоРеализацияТоваровПроверкаЗаписиПроведенияОтменыПроведенияБезОшибок")
			.ДобавитьТест("_ДемоРеализацияТоваровПроверкаПроведенияСОшибкамиПревышениеСуммыРеализации")
			.ДобавитьТест("_ДемоРеализацияТоваровПроверкаПроведенияСОшибкамиПревышениеОстаткаСтоимостиСертификата")
			.ДобавитьТест("_ДемоРеализацияТоваровПроверкаПроведенияСОшибкамиНедопустимыйСтатус")
			.ДобавитьТест("_ДемоРеализацияТоваровПроверкаОтменыПроведенияСОшибками")
		;
	
КонецПроцедуры

Процедура ПередВсемиТестами() Экспорт
	
	Общ_Инициализация.ВыполнитьИнициализациюДанных();
	
КонецПроцедуры

Процедура _ДемоРеализацияТоваровПроверкаЗаписиПроведенияОтменыПроведенияБезОшибок(СОтменойПроведения = Истина) Экспорт
	
	// Описание программного создания: https://bia-technologies.github.io/yaxunit/docs/features/test-data/data-generation/
	
	//Сначала сгенерируем необходимый вид подарочных сертификатов + сами подарочные сертификаты + реализацию сертификатов
	Док_РеализацияПодарочныхСертификатов.РеализацияПодарочныхСертификатовПроверкаЗаписиПроведенияОтменыПроведенияБезОшибок(Ложь);
	
	//Выберем первые 4 (из 5 активированных) сертификата, УПОРЯДОЧИВАЯ ПО КОДУ! Это важно для автотестов дальнейших документов (возврата и аннулирования),
	//чтобы быть уверенными в том, что именно первые 4 из 5 использованы для оплаты
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 4
		|	ПодарочныеСертификаты.Ссылка КАК Ссылка,
		|	1 КАК Приоритет,
		|	ПодарочныеСертификаты.Код КАК Код
		|ИЗ
		|	Справочник.ПодарочныеСертификаты КАК ПодарочныеСертификаты
		|ГДЕ
		|	ПодарочныеСертификаты.Владелец.НоминальнаяСтоимость = 1000
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПодарочныеСертификаты.Ссылка,
		|	2,
		|	ПодарочныеСертификаты.Код КАК Код
		|ИЗ
		|	Справочник.ПодарочныеСертификаты КАК ПодарочныеСертификаты
		|ГДЕ
		|	ПодарочныеСертификаты.Владелец.НоминальнаяСтоимость = 3000
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет, Код";
	
	РезультатЗапроса = Запрос.Выполнить();
	ПодарочныеСертификаты = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	//Получаем ссылку на валюту "Российский рубль" из контекста набора тестов
	ВалютаRUB = ЮТест.Контекст().Значение("ВалютаRUB");
	
	//Получим основную организацию
	Организация = Константы._ДемоОсновнаяОрганизация.Получить();
	
	//Сконструируем требуемые объекты для документа
	КонструкторПартнера = ЮТест.Данные().КонструкторОбъекта("Справочники._ДемоПартнеры")
		.ФикцияОбязательныхПолей()
		.Установить("Наименование", "Розничный клиент")	
		.Установить("Клиент", Истина)	
		.Установить("ВидПартнера", Перечисления._ДемоЮридическоеФизическоеЛицо.ФизическоеЛицо)	
		;
		
	РозничныйКлиент = КонструкторПартнера.Записать();
	
	КонструкторКонтрагента = ЮТест.Данные().КонструкторОбъекта("Справочники._ДемоКонтрагенты")
		.ФикцияОбязательныхПолей()
		.Установить("Наименование", "Розничный клиент")	
		.Установить("НаименованиеПолное", "Розничный клиент")	
		.Установить("Партнер", РозничныйКлиент)	
		.Установить("ВидКонтрагента", Перечисления._ДемоЮридическоеФизическоеЛицо.ФизическоеЛицо)	
		;
		
	КонтрагентРозничныйКлиент = КонструкторКонтрагента.Записать();
	
	КонструкторДоговора = ЮТест.Данные().КонструкторОбъекта("Справочники._ДемоДоговорыКонтрагентов")
		.ФикцияОбязательныхПолей()
		.Установить("Владелец", КонтрагентРозничныйКлиент)	
		.Установить("Наименование", "Договор с розничным клиентом")	
		.Установить("Организация", Организация)	
		.Установить("Партнер", РозничныйКлиент)	
		.Установить("ВалютаРасчетов", ВалютаRUB)	
		;
		
	ДоговорСКонтрагентом = КонструкторДоговора.Записать();
	
	КонструкторРеализацииТоваров = ЮТест.Данные().КонструкторОбъекта("Документы._ДемоРеализацияТоваров")
		.Установить("Дата", ТекущаяДатаСеанса() + 3)	
		.Установить("ГоловнаяОрганизация", Организация)
		.Установить("Партнер", РозничныйКлиент)
		.Установить("Контрагент", КонтрагентРозничныйКлиент)
		.Установить("Договор", ДоговорСКонтрагентом)
		.Установить("Ответственный", Пользователи.ТекущийПользователь())
		.Установить("Комментарий", "Приобретен в рамках акции ""Юбилей компании""")
		.ФикцияОбязательныхПолей()
		.ТабличнаяЧасть("Товары")
			.ДобавитьСтроку()
			.ФикцияОбязательныхПолей()
				.Установить("Количество", 1)
				.Установить("Цена", 5000)
				.Установить("Сумма", 5000)
		.ТабличнаяЧасть("ОплатаПодарочнымиСертификатами")
			.ДобавитьСтроку()
				.Установить("ПодарочныйСертификат", ПодарочныеСертификаты[0])
				.Установить("СуммаОплаты", 1000)
			.ДобавитьСтроку()
				.Установить("ПодарочныйСертификат", ПодарочныеСертификаты[1])
				.Установить("СуммаОплаты", 1000)
			.ДобавитьСтроку()
				.Установить("ПодарочныйСертификат", ПодарочныеСертификаты[2])
				.Установить("СуммаОплаты", 1000)
			.ДобавитьСтроку()
				.Установить("ПодарочныйСертификат", ПодарочныеСертификаты[3])
				.Установить("СуммаОплаты", 1000)
			.ДобавитьСтроку()
				.Установить("ПодарочныйСертификат", ПодарочныеСертификаты[4])
				.Установить("СуммаОплаты", 1000)
		;
	
	РеализацияТоваров = КонструкторРеализацииТоваров.Записать();  
			
	ЮТест.ОжидаетЧто(РеализацияТоваров.ПолучитьОбъект())  
		.Метод("Записать").Параметр(РежимЗаписиДокумента.Проведение)   
		.НеВыбрасываетИсключение()	
		;
		
	Рег_ПроверкиЗаписейВРегистрах.ИсторияСтатусовПодарочныхСертификатовПроверкаНаличия(РеализацияТоваров, Перечисления.СтатусыПодарочныхСертификатов.ПолностьюИспользован, 4);
	Рег_ПроверкиЗаписейВРегистрах.ИсторияСтатусовПодарочныхСертификатовПроверкаНаличия(РеализацияТоваров, Перечисления.СтатусыПодарочныхСертификатов.ЧастичноИспользован, 1);
	
	Рег_ПроверкиЗаписейВРегистрах.ОстаткиСтоимостиПодарочныхСертификатовПроверкаНаличия(РеализацияТоваров, 5, РеализацияТоваров.ОплатаПодарочнымиСертификатами.Итог("СуммаОплаты"));
	
	Если СОтменойПроведения Тогда
		ЮТест.ОжидаетЧто(РеализацияТоваров.ПолучитьОбъект())  
			.Метод("Записать").Параметр(РежимЗаписиДокумента.ОтменаПроведения)   
			.НеВыбрасываетИсключение()	
			;
			
		Рег_ПроверкиЗаписейВРегистрах.ИсторияСтатусовПодарочныхСертификатовПроверкаНаличия(РеализацияТоваров);	
		Рег_ПроверкиЗаписейВРегистрах.ОстаткиСтоимостиПодарочныхСертификатовПроверкаНаличия(РеализацияТоваров);
	КонецЕсли;
	
КонецПроцедуры

Процедура _ДемоРеализацияТоваровПроверкаПроведенияСОшибкамиПревышениеСуммыРеализации() Экспорт
	
	// Описание программного создания: https://bia-technologies.github.io/yaxunit/docs/features/test-data/data-generation/
	
	//Сначала сгенерируем необходимый вид подарочных сертификатов + сами подарочные сертификаты + реализацию сертификатов
	Док_РеализацияПодарочныхСертификатов.РеализацияПодарочныхСертификатовПроверкаЗаписиПроведенияОтменыПроведенияБезОшибок(Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 4
		|	ПодарочныеСертификаты.Ссылка КАК Ссылка,
		|	1 КАК Приоритет
		|ИЗ
		|	Справочник.ПодарочныеСертификаты КАК ПодарочныеСертификаты
		|ГДЕ
		|	ПодарочныеСертификаты.Владелец.НоминальнаяСтоимость = 1000
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПодарочныеСертификаты.Ссылка,
		|	2
		|ИЗ
		|	Справочник.ПодарочныеСертификаты КАК ПодарочныеСертификаты
		|ГДЕ
		|	ПодарочныеСертификаты.Владелец.НоминальнаяСтоимость = 3000
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет";
	
	РезультатЗапроса = Запрос.Выполнить();
	ПодарочныеСертификаты = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	//Получаем ссылку на валюту "Российский рубль" из контекста набора тестов
	ВалютаRUB = ЮТест.Контекст().Значение("ВалютаRUB");
	
	//Получим основную организацию
	Организация = Константы._ДемоОсновнаяОрганизация.Получить();
	
	//Сконструируем требуемые объекты для документа
	КонструкторПартнера = ЮТест.Данные().КонструкторОбъекта("Справочники._ДемоПартнеры")
		.ФикцияОбязательныхПолей()
		.Установить("Наименование", "Розничный клиент")	
		.Установить("Клиент", Истина)	
		.Установить("ВидПартнера", Перечисления._ДемоЮридическоеФизическоеЛицо.ФизическоеЛицо)	
		;
		
	РозничныйКлиент = КонструкторПартнера.Записать();
	
	КонструкторКонтрагента = ЮТест.Данные().КонструкторОбъекта("Справочники._ДемоКонтрагенты")
		.ФикцияОбязательныхПолей()
		.Установить("Наименование", "Розничный клиент")	
		.Установить("НаименованиеПолное", "Розничный клиент")	
		.Установить("Партнер", РозничныйКлиент)	
		.Установить("ВидКонтрагента", Перечисления._ДемоЮридическоеФизическоеЛицо.ФизическоеЛицо)	
		;
		
	КонтрагентРозничныйКлиент = КонструкторКонтрагента.Записать();
	
	КонструкторДоговора = ЮТест.Данные().КонструкторОбъекта("Справочники._ДемоДоговорыКонтрагентов")
		.ФикцияОбязательныхПолей()
		.Установить("Владелец", КонтрагентРозничныйКлиент)	
		.Установить("Наименование", "Договор с розничным клиентом")	
		.Установить("Организация", Организация)	
		.Установить("Партнер", РозничныйКлиент)	
		.Установить("ВалютаРасчетов", ВалютаRUB)	
		;
		
	ДоговорСКонтрагентом = КонструкторДоговора.Записать();
	
	//Проверка превышения общей суммы документа
	КонструкторРеализацииТоваров = ЮТест.Данные().КонструкторОбъекта("Документы._ДемоРеализацияТоваров")
		.Установить("Дата", ТекущаяДатаСеанса() + 3)	
		.Установить("ГоловнаяОрганизация", Организация)
		.Установить("Партнер", РозничныйКлиент)
		.Установить("Контрагент", КонтрагентРозничныйКлиент)
		.Установить("Договор", ДоговорСКонтрагентом)
		.Установить("Ответственный", Пользователи.ТекущийПользователь())
		.Установить("Комментарий", "Приобретен в рамках акции ""Юбилей компании""")
		.ФикцияОбязательныхПолей()
		.ТабличнаяЧасть("Товары")
			.ДобавитьСтроку()
			.ФикцияОбязательныхПолей()
				.Установить("Количество", 1)
				.Установить("Цена", 5000)
				.Установить("Сумма", 5000)
		.ТабличнаяЧасть("ОплатаПодарочнымиСертификатами")
			.ДобавитьСтроку()
				.Установить("ПодарочныйСертификат", ПодарочныеСертификаты[0])
				.Установить("СуммаОплаты", 1500)
			.ДобавитьСтроку()
				.Установить("ПодарочныйСертификат", ПодарочныеСертификаты[1])
				.Установить("СуммаОплаты", 1000)
			.ДобавитьСтроку()
				.Установить("ПодарочныйСертификат", ПодарочныеСертификаты[2])
				.Установить("СуммаОплаты", 1000)
			.ДобавитьСтроку()
				.Установить("ПодарочныйСертификат", ПодарочныеСертификаты[3])
				.Установить("СуммаОплаты", 1000)
			.ДобавитьСтроку()
				.Установить("ПодарочныйСертификат", ПодарочныеСертификаты[4])
				.Установить("СуммаОплаты", 1000)
		;
	
	РеализацияТоваров = КонструкторРеализацииТоваров.Записать();  
			
	ЮТест.ОжидаетЧто(РеализацияТоваров.ПолучитьОбъект())  
		.Метод("Записать").Параметр(РежимЗаписиДокумента.Проведение)   
		.ВыбрасываетИсключение("Не удалось провести ""Демо: Реализация товаров")	
		;
		
	Сообщения = ПолучитьСообщенияПользователю();
	ЮТест.ОжидаетЧто(Сообщения)
		.ИмеетТип("ФиксированныйМассив")
		.ИмеетДлину(1)
		.Свойство("[0].Текст")
			.Содержит(НСтр("ru = 'Общая сумма оплаты подарочными сертификатами не может превышать сумму документа!'"))
		;
		
КонецПроцедуры

Процедура _ДемоРеализацияТоваровПроверкаПроведенияСОшибкамиПревышениеОстаткаСтоимостиСертификата() Экспорт
	
	// Описание программного создания: https://bia-technologies.github.io/yaxunit/docs/features/test-data/data-generation/
	
	//Сначала сгенерируем необходимый вид подарочных сертификатов + сами подарочные сертификаты + реализацию сертификатов
	Док_РеализацияПодарочныхСертификатов.РеализацияПодарочныхСертификатовПроверкаЗаписиПроведенияОтменыПроведенияБезОшибок(Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 4
		|	ПодарочныеСертификаты.Ссылка КАК Ссылка,
		|	1 КАК Приоритет
		|ИЗ
		|	Справочник.ПодарочныеСертификаты КАК ПодарочныеСертификаты
		|ГДЕ
		|	ПодарочныеСертификаты.Владелец.НоминальнаяСтоимость = 1000
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПодарочныеСертификаты.Ссылка,
		|	2
		|ИЗ
		|	Справочник.ПодарочныеСертификаты КАК ПодарочныеСертификаты
		|ГДЕ
		|	ПодарочныеСертификаты.Владелец.НоминальнаяСтоимость = 3000
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет";
	
	РезультатЗапроса = Запрос.Выполнить();
	ПодарочныеСертификаты = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	//Получаем ссылку на валюту "Российский рубль" из контекста набора тестов
	ВалютаRUB = ЮТест.Контекст().Значение("ВалютаRUB");
	
	//Получим основную организацию
	Организация = Константы._ДемоОсновнаяОрганизация.Получить();
	
	//Сконструируем требуемые объекты для документа
	КонструкторПартнера = ЮТест.Данные().КонструкторОбъекта("Справочники._ДемоПартнеры")
		.ФикцияОбязательныхПолей()
		.Установить("Наименование", "Розничный клиент")	
		.Установить("Клиент", Истина)	
		.Установить("ВидПартнера", Перечисления._ДемоЮридическоеФизическоеЛицо.ФизическоеЛицо)	
		;
		
	РозничныйКлиент = КонструкторПартнера.Записать();
	
	КонструкторКонтрагента = ЮТест.Данные().КонструкторОбъекта("Справочники._ДемоКонтрагенты")
		.ФикцияОбязательныхПолей()
		.Установить("Наименование", "Розничный клиент")	
		.Установить("НаименованиеПолное", "Розничный клиент")	
		.Установить("Партнер", РозничныйКлиент)	
		.Установить("ВидКонтрагента", Перечисления._ДемоЮридическоеФизическоеЛицо.ФизическоеЛицо)	
		;
		
	КонтрагентРозничныйКлиент = КонструкторКонтрагента.Записать();
	
	КонструкторДоговора = ЮТест.Данные().КонструкторОбъекта("Справочники._ДемоДоговорыКонтрагентов")
		.ФикцияОбязательныхПолей()
		.Установить("Владелец", КонтрагентРозничныйКлиент)	
		.Установить("Наименование", "Договор с розничным клиентом")	
		.Установить("Организация", Организация)	
		.Установить("Партнер", РозничныйКлиент)	
		.Установить("ВалютаРасчетов", ВалютаRUB)	
		;
		
	ДоговорСКонтрагентом = КонструкторДоговора.Записать();
	
	//Проверка превышения общей суммы документа
	КонструкторРеализацииТоваров = ЮТест.Данные().КонструкторОбъекта("Документы._ДемоРеализацияТоваров")
		.Установить("Дата", ТекущаяДатаСеанса() + 3)	
		.Установить("ГоловнаяОрганизация", Организация)
		.Установить("Партнер", РозничныйКлиент)
		.Установить("Контрагент", КонтрагентРозничныйКлиент)
		.Установить("Договор", ДоговорСКонтрагентом)
		.Установить("Ответственный", Пользователи.ТекущийПользователь())
		.Установить("Комментарий", "Приобретен в рамках акции ""Юбилей компании""")
		.ФикцияОбязательныхПолей()
		.ТабличнаяЧасть("Товары")
			.ДобавитьСтроку()
			.ФикцияОбязательныхПолей()
				.Установить("Количество", 1)
				.Установить("Цена", 5000)
				.Установить("Сумма", 5000)
		.ТабличнаяЧасть("ОплатаПодарочнымиСертификатами")
			.ДобавитьСтроку()
				.Установить("ПодарочныйСертификат", ПодарочныеСертификаты[0])
				.Установить("СуммаОплаты", 1500)
			.ДобавитьСтроку()
				.Установить("ПодарочныйСертификат", ПодарочныеСертификаты[1])
				.Установить("СуммаОплаты", 1000)
			.ДобавитьСтроку()
				.Установить("ПодарочныйСертификат", ПодарочныеСертификаты[2])
				.Установить("СуммаОплаты", 1000)
			.ДобавитьСтроку()
				.Установить("ПодарочныйСертификат", ПодарочныеСертификаты[3])
				.Установить("СуммаОплаты", 1000)
			.ДобавитьСтроку()
				.Установить("ПодарочныйСертификат", ПодарочныеСертификаты[4])
				.Установить("СуммаОплаты", 500)
		;
	
	РеализацияТоваров = КонструкторРеализацииТоваров.Записать();  
			
	ЮТест.ОжидаетЧто(РеализацияТоваров.ПолучитьОбъект())  
		.Метод("Записать").Параметр(РежимЗаписиДокумента.Проведение)   
		.ВыбрасываетИсключение("Не удалось провести ""Демо: Реализация товаров")	
		;
		
	Сообщения = ПолучитьСообщенияПользователю();
	ЮТест.ОжидаетЧто(Сообщения)
		.ИмеетТип("ФиксированныйМассив")
		.ИмеетДлину(1)
		.Свойство("[0].Текст")
			.Содержит(НСтр("ru = 'В строке 1 сумма оплаты превышает доступный к оплате остаток по сертификату!'"))
		;
		
КонецПроцедуры

Процедура _ДемоРеализацияТоваровПроверкаПроведенияСОшибкамиНедопустимыйСтатус() Экспорт
	
	// Описание программного создания: https://bia-technologies.github.io/yaxunit/docs/features/test-data/data-generation/
	
	//Здесь используем автотест для документа "ВводОстатковПодарочныхСертификатов", так как там создаются сертификаты в разных статусах (в т.ч. недопустимых)
	Док_ВводОстатковПодарочныхСертификатов.ВводОстатковПодарочныхСертификатовПроверкаЗаписиПроведенияОтменыПроведенияБезОшибок(Ложь);
	
	ПодарочныеСертификаты = Новый Массив;
	
	ВыборкаПодарочныхСертификатов = Справочники.ПодарочныеСертификаты.Выбрать(, , , "Код ВОЗР");
	
	Пока ВыборкаПодарочныхСертификатов.Следующий() Цикл
		ПодарочныеСертификаты.Добавить(ВыборкаПодарочныхСертификатов.Ссылка);
	КонецЦикла;
	
	//Получаем ссылку на валюту "Российский рубль" из контекста набора тестов
	ВалютаRUB = ЮТест.Контекст().Значение("ВалютаRUB");
	
	//Получим основную организацию
	Организация = Константы._ДемоОсновнаяОрганизация.Получить();
	
	//Сконструируем требуемые объекты для документа
	КонструкторПартнера = ЮТест.Данные().КонструкторОбъекта("Справочники._ДемоПартнеры")
		.ФикцияОбязательныхПолей()
		.Установить("Наименование", "Розничный клиент")	
		.Установить("Клиент", Истина)	
		.Установить("ВидПартнера", Перечисления._ДемоЮридическоеФизическоеЛицо.ФизическоеЛицо)	
		;
		
	РозничныйКлиент = КонструкторПартнера.Записать();
	
	КонструкторКонтрагента = ЮТест.Данные().КонструкторОбъекта("Справочники._ДемоКонтрагенты")
		.ФикцияОбязательныхПолей()
		.Установить("Наименование", "Розничный клиент")	
		.Установить("НаименованиеПолное", "Розничный клиент")	
		.Установить("Партнер", РозничныйКлиент)	
		.Установить("ВидКонтрагента", Перечисления._ДемоЮридическоеФизическоеЛицо.ФизическоеЛицо)	
		;
		
	КонтрагентРозничныйКлиент = КонструкторКонтрагента.Записать();
	
	КонструкторДоговора = ЮТест.Данные().КонструкторОбъекта("Справочники._ДемоДоговорыКонтрагентов")
		.ФикцияОбязательныхПолей()
		.Установить("Владелец", КонтрагентРозничныйКлиент)	
		.Установить("Наименование", "Договор с розничным клиентом")	
		.Установить("Организация", Организация)	
		.Установить("Партнер", РозничныйКлиент)	
		.Установить("ВалютаРасчетов", ВалютаRUB)	
		;
		
	ДоговорСКонтрагентом = КонструкторДоговора.Записать();
	
	//Проверка превышения общей суммы документа
	КонструкторРеализацииТоваров = ЮТест.Данные().КонструкторОбъекта("Документы._ДемоРеализацияТоваров")
		.Установить("Дата", ТекущаяДатаСеанса() + 3)	
		.Установить("ГоловнаяОрганизация", Организация)
		.Установить("Партнер", РозничныйКлиент)
		.Установить("Контрагент", КонтрагентРозничныйКлиент)
		.Установить("Договор", ДоговорСКонтрагентом)
		.Установить("Ответственный", Пользователи.ТекущийПользователь())
		.Установить("Комментарий", "Приобретен в рамках акции ""Юбилей компании""")
		.ФикцияОбязательныхПолей()
		.ТабличнаяЧасть("Товары")
			.ДобавитьСтроку()
			.ФикцияОбязательныхПолей()
				.Установить("Количество", 1)
				.Установить("Цена", 5000)
				.Установить("Сумма", 5000)
		.ТабличнаяЧасть("ОплатаПодарочнымиСертификатами")
			.ДобавитьСтроку()
				.Установить("ПодарочныйСертификат", ПодарочныеСертификаты[0])
				.Установить("СуммаОплаты", 1000)
			.ДобавитьСтроку()
				.Установить("ПодарочныйСертификат", ПодарочныеСертификаты[4])
				.Установить("СуммаОплаты", 1000)
		;
	
	РеализацияТоваров = КонструкторРеализацииТоваров.Записать();  
			
	ЮТест.ОжидаетЧто(РеализацияТоваров.ПолучитьОбъект())  
		.Метод("Записать").Параметр(РежимЗаписиДокумента.Проведение)   
		.ВыбрасываетИсключение("Не удалось провести ""Демо: Реализация товаров")	
		;
		
	Сообщения = ПолучитьСообщенияПользователю();
	ЮТест.ОжидаетЧто(Сообщения)
		.ИмеетТип("ФиксированныйМассив")
		.ИмеетДлину(8)
		.Свойство("[0].Текст")
			.Содержит(НСтр("ru = 'В строке 1 подарочный сертификат не был активирован ранее (или уже полностью использован)!'"))
		.Свойство("[4].Текст")
			.Содержит(НСтр("ru = 'В строке 2 подарочный сертификат не был активирован ранее (или уже полностью использован)!'"))
		;
		
КонецПроцедуры

Процедура _ДемоРеализацияТоваровПроверкаОтменыПроведенияСОшибками() Экспорт
	
	// Описание программного создания: https://bia-technologies.github.io/yaxunit/docs/features/test-data/data-generation/

	//Сгенерируем и проведем документ возврата подарочных сертификатов
	//(а он уже по цепочке создаст и проведет документ реализации товаров с оплатой подарочными сертификатами)
    Док_ВозвратПодарочныхСертификатов.ВозвратПодарочныхСертификатовПроверкаЗаписиПроведенияОтменыПроведенияБезОшибок(Ложь);
	
	//Выберем запросом с отбором по заполненным сертификатам в табличной части, так как в базе могут быть прежние реализации товаров без подарочных сертификатов
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	_ДемоРеализацияТоваровОплатаПодарочнымиСертификатами.Ссылка КАК Ссылка
		|ИЗ
		|	Документ._ДемоРеализацияТоваров.ОплатаПодарочнымиСертификатами КАК _ДемоРеализацияТоваровОплатаПодарочнымиСертификатами
		|ГДЕ
		|	_ДемоРеализацияТоваровОплатаПодарочнымиСертификатами.Ссылка.Проведен";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ЮТест.ОжидаетЧто(ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект())  
			.Метод("Записать").Параметр(РежимЗаписиДокумента.ОтменаПроведения)   
			.ВыбрасываетИсключение("Не удалось сделать непроведенным ""Демо: Реализация товаров")	
			;
				
	КонецЕсли;                                               

	Сообщения = ПолучитьСообщенияПользователю();
	ЮТест.ОжидаетЧто(Сообщения)
		.ИмеетТип("ФиксированныйМассив")
		.ИмеетДлину(2)
		.Свойство("[0].Текст")
			.Содержит(НСтр("ru = 'В строке 5 с подарочным сертификатом проведена дальнейшая операция!'"))
		.Свойство("[1].Текст")
			.Содержит(НСтр("ru = 'Невозможно отменить проведение документа!'"))
		;
	
КонецПроцедуры

#КонецОбласти

