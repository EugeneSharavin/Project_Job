
#Область ПрограммныйИнтерфейс

Процедура ИсполняемыеСценарии() Экспорт
    
    ЮТТесты
		.ДобавитьТестовыйНабор("Документ ""Ввод остатков подарочных сертификатов"": Проверка проведения и отмены проведения").ВТранзакции()
			.ДобавитьТест("ВводОстатковПодарочныхСертификатовПроверкаЗаписиПроведенияОтменыПроведенияБезОшибок")
			.ДобавитьТест("ВводОстатковПодарочныхСертификатовПроверкаПроведенияСОшибками")
			.ДобавитьТест("ВводОстатковПодарочныхСертификатовПроверкаОтменыПроведенияСОшибками")
		;
	
КонецПроцедуры

Процедура ПередВсемиТестами() Экспорт
	
	Общ_Инициализация.ВыполнитьИнициализациюДанных();
	
КонецПроцедуры

Процедура ВводОстатковПодарочныхСертификатовПроверкаЗаписиПроведенияОтменыПроведенияБезОшибок(СОтменойПроведения = Истина) Экспорт
	
	// Описание программного создания: https://bia-technologies.github.io/yaxunit/docs/features/test-data/data-generation/
	
	//Сначала сгенерируем необходимый вид подарочных сертификатов (создадим только один вид подарочных сертификатов)

	//Получаем ссылку на валюту "Российский рубль" из контекста набора тестов
	ВалютаRUB = ЮТест.Контекст().Значение("ВалютаRUB");

	ВидПодарочныхСертификатов = Спр_ВидыПодарочныхСертификатов.СгенерироватьВидПодарочныхСертификатов("Новогодний", 5000, ВалютаRUB, 12, Истина, Истина, "99 9999");
	
	//Далее сгенерируем необходимые подарочные сертификаты
	Спр_ПодарочныеСертификаты.ПроверкаАвтоматическойГенерацииПодарочныхСертификатов(ВидПодарочныхСертификатов);
	
	ПодарочныеСертификаты = Новый Массив;
	
	ВыборкаПодарочныхСертификатов = Справочники.ПодарочныеСертификаты.Выбрать(, ВидПодарочныхСертификатов, , "Код ВОЗР");
	
	Пока ВыборкаПодарочныхСертификатов.Следующий() Цикл
		ПодарочныеСертификаты.Добавить(ВыборкаПодарочныхСертификатов.Ссылка);
	КонецЦикла;
	
	КонструкторВводаОстатков = ЮТест.Данные().КонструкторОбъекта("Документы.ВводОстатковПодарочныхСертификатов")
		.Установить("Дата", ТекущаяДатаСеанса() + 1)
		.Установить("ВидПодарочныхСертификатов", ВидПодарочныхСертификатов)
		.Установить("Ответственный", Пользователи.ТекущийПользователь())
		.Установить("Комментарий", "Ввод начальных остатков подарочных сертификатов")
		.ТабличнаяЧасть("ПодарочныеСертификаты")
			.ДобавитьСтроку()
				.Установить("ПодарочныйСертификат", ПодарочныеСертификаты[0])
				.Установить("Статус", Перечисления.СтатусыПодарочныхСертификатов.Выпущен)
			.ДобавитьСтроку()
				.Установить("ПодарочныйСертификат", ПодарочныеСертификаты[1])
				.Установить("Статус", Перечисления.СтатусыПодарочныхСертификатов.Выпущен)
			.ДобавитьСтроку()
				.Установить("ПодарочныйСертификат", ПодарочныеСертификаты[2])
				.Установить("Статус", Перечисления.СтатусыПодарочныхСертификатов.Активирован)
				.Установить("ОстатокСуммы", 5000)
				.Установить("ДействуетДо", ТекущаяДатаСеанса() + 8 * 86400)
			.ДобавитьСтроку()
				.Установить("ПодарочныйСертификат", ПодарочныеСертификаты[3])
				.Установить("Статус", Перечисления.СтатусыПодарочныхСертификатов.ЧастичноИспользован)
				.Установить("ОстатокСуммы", 345)
				.Установить("ДействуетДо", ТекущаяДатаСеанса() - 10 * 86400)
			.ДобавитьСтроку()
				.Установить("ПодарочныйСертификат", ПодарочныеСертификаты[4])
				.Установить("Статус", Перечисления.СтатусыПодарочныхСертификатов.Возвращен)
				.Установить("ОстатокСуммы", 0)
			.ДобавитьСтроку()
				.Установить("ПодарочныйСертификат", "88 8888")
				.Установить("Статус", Перечисления.СтатусыПодарочныхСертификатов.ЧастичноИспользован)
				.Установить("ОстатокСуммы", 173)
				.Установить("ДействуетДо", ТекущаяДатаСеанса() + 15 * 86400)
		;
	
	ВводОстатков = КонструкторВводаОстатков.Записать();  
			
	ЮТест.ОжидаетЧто(ВводОстатков.ПолучитьОбъект())  
		.Метод("Записать").Параметр(РежимЗаписиДокумента.Проведение)   
		.НеВыбрасываетИсключение()	
		;
		
	Рег_ПроверкиЗаписейВРегистрах.ИсторияСтатусовПодарочныхСертификатовПроверкаНаличия(ВводОстатков, Перечисления.СтатусыПодарочныхСертификатов.Выпущен, 2);
	Рег_ПроверкиЗаписейВРегистрах.ИсторияСтатусовПодарочныхСертификатовПроверкаНаличия(ВводОстатков, Перечисления.СтатусыПодарочныхСертификатов.Активирован, 1);
	Рег_ПроверкиЗаписейВРегистрах.ИсторияСтатусовПодарочныхСертификатовПроверкаНаличия(ВводОстатков, Перечисления.СтатусыПодарочныхСертификатов.ЧастичноИспользован, 2);
	Рег_ПроверкиЗаписейВРегистрах.ИсторияСтатусовПодарочныхСертификатовПроверкаНаличия(ВводОстатков, Перечисления.СтатусыПодарочныхСертификатов.Возвращен, 1);
	
	Рег_ПроверкиЗаписейВРегистрах.ОстаткиСтоимостиПодарочныхСертификатовПроверкаНаличия(ВводОстатков, 3, 5518);
	
	Если СОтменойПроведения Тогда
		ЮТест.ОжидаетЧто(ВводОстатков.ПолучитьОбъект())  
			.Метод("Записать").Параметр(РежимЗаписиДокумента.ОтменаПроведения)   
			.НеВыбрасываетИсключение()	
			;

		Рег_ПроверкиЗаписейВРегистрах.ИсторияСтатусовПодарочныхСертификатовПроверкаНаличия(ВводОстатков);
	 	Рег_ПроверкиЗаписейВРегистрах.ОстаткиСтоимостиПодарочныхСертификатовПроверкаНаличия(ВводОстатков);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВводОстатковПодарочныхСертификатовПроверкаПроведенияСОшибками() Экспорт
	
	// Описание программного создания: https://bia-technologies.github.io/yaxunit/docs/features/test-data/data-generation/
	
	//Сначала сгенерируем необходимый вид подарочных сертификатов (создадим только один вид подарочных сертификатов)

	//Получаем ссылку на валюту "Российский рубль" из контекста набора тестов
	ВалютаRUB = ЮТест.Контекст().Значение("ВалютаRUB");

	ВидПодарочныхСертификатов = Спр_ВидыПодарочныхСертификатов.СгенерироватьВидПодарочныхСертификатов("Новогодний", 5000, ВалютаRUB, 12, Истина, Истина, "99 9999");
	
	//Далее сгенерируем необходимые подарочные сертификаты
	Спр_ПодарочныеСертификаты.ПроверкаАвтоматическойГенерацииПодарочныхСертификатов(ВидПодарочныхСертификатов);
	
	ПодарочныеСертификаты = Новый Массив;
	
	ВыборкаПодарочныхСертификатов = Справочники.ПодарочныеСертификаты.Выбрать(, ВидПодарочныхСертификатов);
	
	Пока ВыборкаПодарочныхСертификатов.Следующий() Цикл
		ПодарочныеСертификаты.Добавить(ВыборкаПодарочныхСертификатов.Ссылка);
	КонецЦикла;
	
	КонструкторВводаОстатков = ЮТест.Данные().КонструкторОбъекта("Документы.ВводОстатковПодарочныхСертификатов")
		.Установить("Дата", ТекущаяДатаСеанса() + 1)
		.Установить("ВидПодарочныхСертификатов", ВидПодарочныхСертификатов)
		.Установить("Ответственный", Пользователи.ТекущийПользователь())
		.Установить("Комментарий", "Ввод начальных остатков подарочных сертификатов")
		.ТабличнаяЧасть("ПодарочныеСертификаты")
			.ДобавитьСтроку()
				.Установить("ПодарочныйСертификат", ПодарочныеСертификаты[0])
				.Установить("Статус", Перечисления.СтатусыПодарочныхСертификатов.Активирован)
				.Установить("ОстатокСуммы", 5010)
				.Установить("ДействуетДо", ТекущаяДатаСеанса() + 8 * 86400)
			.ДобавитьСтроку()
				.Установить("ПодарочныйСертификат", ПодарочныеСертификаты[0])
				.Установить("Статус", Перечисления.СтатусыПодарочныхСертификатов.Выпущен)
				.Установить("ОстатокСуммы", 500)
		;
	
	ВводОстатков = КонструкторВводаОстатков.Записать();  
			
	ЮТест.ОжидаетЧто(ВводОстатков.ПолучитьОбъект())  
		.Метод("Записать",  ЮТМетоды.МассивПараметров(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный)) 
		.ВыбрасываетИсключение("Не удалось провести ""Ввод остатков подарочных сертификатов")	
		;
		
	Сообщения = ПолучитьСообщенияПользователю();
	ЮТест.ОжидаетЧто(Сообщения)
		.ИмеетТип("ФиксированныйМассив")
		.ИмеетДлину(3)
		.Свойство("[0].Текст")
			.ИмеетТип("Строка")
			.Содержит(НСтр("ru = 'В строке 2 подарочный сертификат указан повторно!'"))
		.Свойство("[1].Текст")
			.ИмеетТип("Строка")
			.Содержит(НСтр("ru = 'Строка 1: в случае активации подарочного сертификата остаток неиспользованной суммы должен быть строго равен номинальной стоимости (5 000 RUB)!'"))
		.Свойство("[2].Текст")
			.ИмеетТип("Строка")
			.Содержит(НСтр("ru = 'Строка 2: в случае выпуска, полного погашения, возврата или аннуляции остаток неиспользованной суммы должен быть равен нулю!'"))
		;
	
КонецПроцедуры

Процедура ВводОстатковПодарочныхСертификатовПроверкаОтменыПроведенияСОшибками() Экспорт
	
	// Описание программного создания: https://bia-technologies.github.io/yaxunit/docs/features/test-data/data-generation/

	//Сгенерируем и проведем документ аннулирования подарочных сертификатов (а он уже по цепочке создаст и проведет документ ввода остатков)
    Док_АннулированиеПодарочныхСертификатов.АннулированиеПодарочныхСертификатовВыбранногоВидаПроверкаЗаписиПроведенияОтменыПроведенияБезОшибок(Ложь);
	
	Выборка = Документы.ВводОстатковПодарочныхСертификатов.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЮТест.ОжидаетЧто(Выборка.ПолучитьОбъект())  
			.Метод("Записать").Параметр(РежимЗаписиДокумента.ОтменаПроведения)   
			.ВыбрасываетИсключение("Не удалось сделать непроведенным ""Ввод остатков подарочных сертификатов")	
			;
				
	КонецЕсли;                                               

	Сообщения = ПолучитьСообщенияПользователю();
	ЮТест.ОжидаетЧто(Сообщения)
		.ИмеетТип("ФиксированныйМассив")
		.ИмеетДлину(5)
		.Свойство("[0].Текст")
			.Содержит(НСтр("ru = 'В строке 1 с подарочным сертификатом проведена дальнейшая операция!'"))
		.Свойство("[1].Текст")
			.Содержит(НСтр("ru = 'В строке 2 с подарочным сертификатом проведена дальнейшая операция!'"))
		.Свойство("[2].Текст")
			.Содержит(НСтр("ru = 'В строке 4 с подарочным сертификатом проведена дальнейшая операция!'"))
		.Свойство("[3].Текст")
			.Содержит(НСтр("ru = 'В строке 5 с подарочным сертификатом проведена дальнейшая операция!'"))
		.Свойство("[4].Текст")
			.Содержит(НСтр("ru = 'Невозможно отменить проведение документа!'"))
		;
	
КонецПроцедуры

#КонецОбласти

