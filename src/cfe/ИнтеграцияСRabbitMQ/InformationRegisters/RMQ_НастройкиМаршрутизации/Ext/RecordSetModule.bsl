#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, Замещение)	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	RMQ_НастройкиМаршрутизации.ТочкаОбмена КАК ТочкаОбмена,
		|	RMQ_НастройкиМаршрутизации.Очередь КАК Очередь,
		|	RMQ_НастройкиМаршрутизации.КлючМаршрутизации КАК КлючМаршрутизации,
		|	RMQ_НастройкиМаршрутизации.Действует КАК Действует
		|ИЗ
		|	РегистрСведений.RMQ_НастройкиМаршрутизации КАК RMQ_НастройкиМаршрутизации
		|ГДЕ
		|	ИСТИНА";
	
	Для Каждого ЭлементОтбора Из Отбор Цикл
		Запрос.Текст = Запрос.Текст + " И " + ЭлементОтбора.Имя + " = &" + ЭлементОтбора.Имя;
		Запрос.УстановитьПараметр(ЭлементОтбора.Имя, ЭлементОтбора.Значение);
	КонецЦикла;

	РезультатЗапроса = Запрос.Выполнить();
	
	ДополнительныеСвойства.Вставить("ДействующиеНастройки", РезультатЗапроса.Выгрузить());
КонецПроцедуры

Процедура ПриЗаписи(Отказ, Замещение)
	КлиентКомпоненты = RMQ_ОбменСообщениями.ПолучитьКомпонентуСервер();

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДействующиеНастройки.ТочкаОбмена КАК ТочкаОбмена,
		|	ДействующиеНастройки.Очередь КАК Очередь,
		|	ДействующиеНастройки.КлючМаршрутизации КАК КлючМаршрутизации
		|ПОМЕСТИТЬ ВТ_ДействующиеНастройки
		|ИЗ
		|	&ДействующиеНастройки КАК ДействующиеНастройки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НовыеНастройки.ТочкаОбмена КАК ТочкаОбмена,
		|	НовыеНастройки.Очередь КАК Очередь,
		|	НовыеНастройки.КлючМаршрутизации КАК КлючМаршрутизации,
		|	НовыеНастройки.Действует КАК Действует
		|ПОМЕСТИТЬ ВТ_НовыеНастройки
		|ИЗ
		|	&НовыеНастройки КАК НовыеНастройки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ВЫРАЗИТЬ(ДействующиеНастройки.ТочкаОбмена КАК Справочник.RMQ_ТочкиОбмена).ВиртуальныйХост, ВЫРАЗИТЬ(НовыеНастройки.ТочкаОбмена КАК Справочник.RMQ_ТочкиОбмена).ВиртуальныйХост) КАК ВиртуальныйХост,
		|	ВЫБОР
		|		КОГДА ДействующиеНастройки.ТочкаОбмена ЕСТЬ NULL
		|				И НовыеНастройки.Действует
		|			ТОГДА ""Добавить""
		|		ИНАЧЕ ""Удалить""
		|	КОНЕЦ КАК Действие,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(ДействующиеНастройки.ТочкаОбмена, НовыеНастройки.ТочкаОбмена) КАК Справочник.RMQ_ТочкиОбмена).Наименование КАК ТочкаОбмена,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(ДействующиеНастройки.ТочкаОбмена, НовыеНастройки.ТочкаОбмена) КАК Справочник.RMQ_ТочкиОбмена).Действует КАК ТочкаОбменаДействует,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(ДействующиеНастройки.Очередь, НовыеНастройки.Очередь) КАК Справочник.RMQ_Очереди).Наименование КАК Очередь,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(ДействующиеНастройки.Очередь, НовыеНастройки.Очередь) КАК Справочник.RMQ_Очереди).Действует КАК ОчередьДействует,
		|	ЕСТЬNULL(ДействующиеНастройки.КлючМаршрутизации, НовыеНастройки.КлючМаршрутизации) КАК КлючМаршрутизации
		|ИЗ
		|	ВТ_ДействующиеНастройки КАК ДействующиеНастройки
		|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_НовыеНастройки КАК НовыеНастройки
		|		ПО ДействующиеНастройки.ТочкаОбмена = НовыеНастройки.ТочкаОбмена
		|			И ДействующиеНастройки.Очередь = НовыеНастройки.Очередь
		|ИТОГИ
		|	МИНИМУМ(ТочкаОбменаДействует),
		|	МИНИМУМ(ОчередьДействует)
		|ПО
		|	ВиртуальныйХост";
	
	Запрос.УстановитьПараметр("ДействующиеНастройки", ДополнительныеСвойства.ДействующиеНастройки);
	Запрос.УстановитьПараметр("НовыеНастройки", Выгрузить());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаВиртуальныйХост = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаВиртуальныйХост.Следующий() Цикл                                             
		ТочкаОбменаИОчередьДействуют = ВыборкаВиртуальныйХост.ТочкаОбменаДействует И ВыборкаВиртуальныйХост.ОчередьДействует;
		
		Если ТочкаОбменаИОчередьДействуют Тогда
			НастройкиПодключения = RMQ_ОбменСообщениями.ПолучитьНастройкиПодключенияRabbitMQ(ВыборкаВиртуальныйХост.ВиртуальныйХост);
			
			Попытка
				КлиентКомпоненты.Connect(
					НастройкиПодключения.Адрес,
					НастройкиПодключения.Порт,
					НастройкиПодключения.ИмяПользователя,
					НастройкиПодключения.Пароль,
					НастройкиПодключения.ВиртуальныйХост);
			Исключение
				СистемнаяОшибка = ОписаниеОшибки();
				ТекстСообщения = "Ошибка соединения с RabbitMQ!%СистемнаяОшибка%";
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СистемнаяОшибка%", СистемнаяОшибка);
				ВызватьИсключение ТекстСообщения;
			КонецПопытки;
		КонецЕсли;
			
		ВыборкаДетальныеЗаписи = ВыборкаВиртуальныйХост.Выбрать();
	
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если НЕ ВыборкаДетальныеЗаписи.ТочкаОбменаДействует Тогда
				Отказ = Истина;
				Сообщить(СтрШаблон(НСтр("ru = 'Точка обмена %1 не действует! Нельзя сделать привязку!'"), ВыборкаДетальныеЗаписи.ТочкаОбмена));
			КонецЕсли;
			
			Если НЕ ВыборкаДетальныеЗаписи.ОчередьДействует Тогда
				Отказ = Истина;
				Сообщить(СтрШаблон(НСтр("ru = 'Очередь %1 не действует! Нельзя сделать привязку!'"), ВыборкаДетальныеЗаписи.Очередь));
			КонецЕсли;
			
			Если ТочкаОбменаИОчередьДействуют Тогда
				Попытка
					Если ВыборкаДетальныеЗаписи.Действие = "Добавить" Тогда
						КлиентКомпоненты.BindQueue(ВыборкаДетальныеЗаписи.Очередь, ВыборкаДетальныеЗаписи.ТочкаОбмена, ВыборкаДетальныеЗаписи.КлючМаршрутизации);
						Сообщить("Привязка очереди к точке обмена успешно выполнена!");
					Иначе
						КлиентКомпоненты.UnbindQueue(ВыборкаДетальныеЗаписи.Очередь, ВыборкаДетальныеЗаписи.ТочкаОбмена, ВыборкаДетальныеЗаписи.КлючМаршрутизации);
						Сообщить("Отвязка очереди от точки обмена успешно выполнена!");
					КонецЕсли;
				Исключение
					СистемнаяОшибка = ОписаниеОшибки();
					ТекстСообщения = "Ошибка создания точек и очередей!%СистемнаяОшибка%";
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СистемнаяОшибка%", СистемнаяОшибка);
					ВызватьИсключение ТекстСообщения;
				КонецПопытки;				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#КонецЕсли