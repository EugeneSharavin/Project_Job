
Процедура ПроверитьПодключение(ВиртуальныйХост) Экспорт
	КлиентКомпоненты = ПолучитьКомпонентуСервер();
	
	НастройкиПодключения = ПолучитьНастройкиПодключенияRabbitMQ(ВиртуальныйХост);

	Попытка
		КлиентКомпоненты.Connect(
				НастройкиПодключения.Адрес,
				НастройкиПодключения.Порт,
				НастройкиПодключения.ИмяПользователя,
				НастройкиПодключения.Пароль,
				НастройкиПодключения.ВиртуальныйХост);
	Исключение
		СистемнаяОшибка = ОписаниеОшибки();
		ТекстСообщения = "Ошибка подключения!%СистемнаяОшибка%";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СистемнаяОшибка%", СистемнаяОшибка);
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
	Сообщить(НСтр("ru = 'Подключение успешно выполнено!'"));
КонецПроцедуры

Процедура ОбменСообщениями() Экспорт
 	КлиентКомпоненты = ПолучитьКомпонентуСервер();

	ЧтениеСообщений(КлиентКомпоненты);
	ОтправкаСообщений(КлиентКомпоненты);
КонецПроцедуры

Процедура ЧтениеСообщений(КлиентКомпоненты)
	ОчередьДляЧтенияСообщений = Константы.ОчередьДляЧтенияСообщений.Получить();
	
	Если НЕ ЗначениеЗаполнено(ОчередьДляЧтенияСообщений) Тогда
		ЗаписьЖурналаРегистрации("ЧтениеСообщенийВRMQ", УровеньЖурналаРегистрации.Информация, , , НСтр("ru = 'Не заполнена очередь для чтения сообщений (в одноименной константе)!'"));
		Возврат;
	КонецЕсли;
	
	РеквизитыОчереди = RMQ_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОчередьДляЧтенияСообщений, "Наименование, Действует");
	
	Если НЕ РеквизитыОчереди.Действует Тогда
		ЗаписьЖурналаРегистрации("ЧтениеСообщенийВRMQ", УровеньЖурналаРегистрации.Ошибка, , , СтрШаблон(НСтр("ru = 'Очередь для чтения сообщений %1 не действует!'"), ОчередьДляЧтенияСообщений));
		Возврат;
	КонецЕсли;		
	
	ПрочитатьСообщения(КлиентКомпоненты, РеквизитыОчереди.Наименование);
КонецПроцедуры

Функция ПрочитатьСообщения(КлиентКомпоненты, 
						   ИмяОчереди, 
						   СоздаватьОбъект = Истина, 
						   УдалятьПрочитанноеСообщениеИзОчереди = Истина) Экспорт
						   
	Если НЕ СоздаватьОбъект И НЕ УдалятьПрочитанноеСообщениеИзОчереди Тогда
		ТаблицаСообщений = Новый ТаблицаЗначений;
		ТаблицаСообщений.Колонки.Добавить("НомерСообщения");
		ТаблицаСообщений.Колонки.Добавить("ТекстСообщения");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА RMQ_НастройкиПодключения.ВиртуальныйХост = ЗНАЧЕНИЕ(Справочник.RMQ_ВиртуальныеХосты.СистемныйВиртуальныйХост)
		|			ТОГДА ""\""
		|		ИНАЧЕ RMQ_НастройкиПодключения.ВиртуальныйХост.Наименование
		|	КОНЕЦ КАК ВиртуальныйХост,
		|	RMQ_НастройкиПодключения.Адрес КАК Адрес,
		|	RMQ_НастройкиПодключения.Порт КАК Порт,
		|	RMQ_НастройкиПодключения.ИмяПользователя КАК ИмяПользователя,
		|	RMQ_НастройкиПодключения.Пароль КАК Пароль
		|ИЗ
		|	РегистрСведений.RMQ_НастройкиПодключения КАК RMQ_НастройкиПодключения
		|ГДЕ
		|	RMQ_НастройкиПодключения.Действует";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Попытка
			КлиентКомпоненты.Connect(
				ВыборкаДетальныеЗаписи.Адрес,
				ВыборкаДетальныеЗаписи.Порт,
				ВыборкаДетальныеЗаписи.ИмяПользователя,
				ВыборкаДетальныеЗаписи.Пароль,
				ВыборкаДетальныеЗаписи.ВиртуальныйХост);
			
			Попытка
				
				БезПодтвержденияЧтенияСообщенияКлиентом = УдалятьПрочитанноеСообщениеИзОчереди;
				
				Потребитель = КлиентКомпоненты.BasicConsume(ИмяОчереди, "", БезПодтвержденияЧтенияСообщенияКлиентом, Ложь, 0);
				
				Пока Истина Цикл
					ТекстСообщения = "";
					Если КлиентКомпоненты.BasicConsumeMessage(Потребитель, ТекстСообщения, 5) Тогда
						Если СоздаватьОбъект Тогда
							RMQ_ОбщегоНазначения.СоздатьОбъектИзТекстаСообщения(ТекстСообщения);
						КонецЕсли;
												
						Если УдалятьПрочитанноеСообщениеИзОчереди Тогда
							КлиентКомпоненты.BasicAck();
						КонецЕсли;
						
						Если НЕ СоздаватьОбъект И НЕ УдалятьПрочитанноеСообщениеИзОчереди Тогда
							НоваяСтрока = ТаблицаСообщений.Добавить();
							НоваяСтрока.НомерСообщения = ТаблицаСообщений.Количество();
							НоваяСтрока.ТекстСообщения = ТекстСообщения;
						КонецЕсли;
					Иначе
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				КлиентКомпоненты.BasicCancel(Потребитель);
			Исключение
				ЗаписьЖурналаРегистрации("ЧтениеСообщенийВRMQ", УровеньЖурналаРегистрации.Ошибка, , , КлиентКомпоненты.GetLastError());
			КонецПопытки;
		Исключение
			СистемнаяОшибка = ОписаниеОшибки();
			ТекстСообщения = "Ошибка чтения сообщения!%СистемнаяОшибка%";
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СистемнаяОшибка%", СистемнаяОшибка);
			ЗаписьЖурналаРегистрации("ЧтениеСообщенийВRMQ", УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
	Если НЕ СоздаватьОбъект И НЕ УдалятьПрочитанноеСообщениеИзОчереди Тогда
		Возврат ТаблицаСообщений;
	КонецЕсли;
КонецФункции

Процедура ОтправкаСообщений(КлиентКомпоненты)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	RMQ_ИсходящиеСообщенияОбмена.ИдентификаторСообщения КАК ИдентификаторСообщения,
		|	RMQ_ИсходящиеСообщенияОбмена.ТекстСообщения КАК ТекстСообщения,
		|	RMQ_ИсходящиеСообщенияОбмена.ТочкаОбмена КАК ТочкаОбмена,
		|	RMQ_ИсходящиеСообщенияОбмена.КлючМаршрутизации КАК КлючМаршрутизации,
		|	RMQ_ИсходящиеСообщенияОбмена.СсылкаНаОбъект КАК СсылкаНаОбъект
		|ИЗ
		|	РегистрСведений.RMQ_ИсходящиеСообщенияОбмена КАК RMQ_ИсходящиеСообщенияОбмена";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ОтправитьСообщение(КлиентКомпоненты, ВыборкаДетальныеЗаписи.ТекстСообщения, ВыборкаДетальныеЗаписи.СсылкаНаОбъект, ВыборкаДетальныеЗаписи.ТочкаОбмена, ВыборкаДетальныеЗаписи.КлючМаршрутизации);
		
		//Была идея реализовать механизм подтверждения через отправку потребителем в RMQ идентификатора прочитанного сообщения (по сути, идентификатора объекта),
		//но так как одно сообщение могут из очередей читать несколько потребителей, то потребовалось бы в регистре исходящих сообщений хранить
		//какой-то уникальный признак потребителя (чтобы после чтения потребителем удалить запись именно для этого потребителя), 
		//что в целом противоречит концепции помещения сообщения в одну точку обмена для множества очередей (в общем случае)
		
		//Поэтому реализовал проще - после отправки сообщения просто удаляю запись с ним из регистра
        УдалитьЗаписьСИсходящимСообщением(ВыборкаДетальныеЗаписи.ИдентификаторСообщения);
	КонецЦикла;
КонецПроцедуры

Процедура УдалитьЗаписьСИсходящимСообщением(ИдентификаторСообщения);
	МенеджерЗаписи = РегистрыСведений.RMQ_ИсходящиеСообщенияОбмена.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ИдентификаторСообщения = ИдентификаторСообщения;
	МенеджерЗаписи.Удалить();
КонецПроцедуры

Функция ПолучитьКомпонентуСервер() Экспорт
	КлиентКомпоненты = Неопределено;
	Если Не ИнициализироватьКомпонентуКлиентСервер(КлиентКомпоненты) Тогда
		
		ПодключитьКомпонентуСервер();
		ИнициализироватьКомпонентуКлиентСервер(КлиентКомпоненты);
		
	КонецЕсли;
	
	Возврат КлиентКомпоненты;
КонецФункции

Функция ИнициализироватьКомпонентуКлиентСервер(Компонента)
	Попытка
		Компонента  = Новый("AddIn.BITERP.PinkRabbitMQ");
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
КонецФункции

Процедура ПодключитьКомпонентуСервер(КомпонентаПодключена = Неопределено)
	АдресВоВременномХранилище = ПолучитьАдресМакетаКомпоновкиНаСервере();
	КомпонентаПодключена = ПодключитьВнешнююКомпоненту(
			АдресВоВременномХранилище,
			"BITERP",
			ТипВнешнейКомпоненты.Native);
КонецПроцедуры

Функция ПолучитьАдресМакетаКомпоновкиНаСервере()
	МакетВнешнейКомпоненты    = ПолучитьОбщийМакет("ВнешняяКомпонента");
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(МакетВнешнейКомпоненты);
	
	Возврат АдресВоВременномХранилище;
КонецФункции

Процедура ОтправитьСообщение(КлиентКомпоненты, ТекстСообщения, Данные, ТочкаОбмена, КлючМаршрутизации)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	RMQ_НастройкиМаршрутизации.ТочкаОбмена.Наименование КАК ТочкаОбмена,
		|	RMQ_НастройкиМаршрутизации.ТочкаОбмена.ВиртуальныйХост КАК ВиртуальныйХост
		|ИЗ
		|	РегистрСведений.RMQ_НастройкиМаршрутизации КАК RMQ_НастройкиМаршрутизации
		|ГДЕ
		|	RMQ_НастройкиМаршрутизации.Действует
		|	И RMQ_НастройкиМаршрутизации.ТочкаОбмена = &ТочкаОбмена
		|	И RMQ_НастройкиМаршрутизации.КлючМаршрутизации = &КлючМаршрутизации
		|ИТОГИ ПО
		|	ВиртуальныйХост";
	
	Запрос.УстановитьПараметр("ТочкаОбмена", ТочкаОбмена);
	Запрос.УстановитьПараметр("КлючМаршрутизации", КлючМаршрутизации);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаВиртуальныйХост = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаВиртуальныйХост.Следующий() Цикл
		НастройкиПодключения = ПолучитьНастройкиПодключенияRabbitMQ(ВыборкаВиртуальныйХост.ВиртуальныйХост);
		
		КлиентКомпоненты.Connect(
			НастройкиПодключения.Адрес,
			НастройкиПодключения.Порт,
			НастройкиПодключения.ИмяПользователя,
			НастройкиПодключения.Пароль,
			НастройкиПодключения.ВиртуальныйХост);
				
		ВыборкаДетальныеЗаписи = ВыборкаВиртуальныйХост.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Попытка
				КлиентКомпоненты.BasicPublish(
					ВыборкаДетальныеЗаписи.ТочкаОбмена,
					КлючМаршрутизации,
					ТекстСообщения,
					1,
					Ложь);
			Исключение
				СистемнаяОшибка = ОписаниеОшибки();
				ТекстСообщенияОбОшибке = "Ошибка отправки сообщения!%СистемнаяОшибка%";
				ТекстСообщенияОбОшибке = СтрЗаменить(ТекстСообщенияОбОшибке, "%СистемнаяОшибка%", СистемнаяОшибка);
				ЗаписьЖурналаРегистрации("ОтправкаСообщенияВRMQ", УровеньЖурналаРегистрации.Ошибка, Данные.Метаданные(), Данные, ТекстСообщенияОбОшибке);
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьНастройкиПодключенияRabbitMQ(ВиртуальныйХост) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА RMQ_НастройкиПодключения.ВиртуальныйХост = ЗНАЧЕНИЕ(Справочник.RMQ_ВиртуальныеХосты.СистемныйВиртуальныйХост)
		|			ТОГДА ""\""
		|		ИНАЧЕ RMQ_НастройкиПодключения.ВиртуальныйХост.Наименование
		|	КОНЕЦ КАК ВиртуальныйХост,
		|	RMQ_НастройкиПодключения.Адрес КАК Адрес,
		|	RMQ_НастройкиПодключения.Порт КАК Порт,
		|	RMQ_НастройкиПодключения.ИмяПользователя КАК ИмяПользователя,
		|	RMQ_НастройкиПодключения.Пароль КАК Пароль,
		|	RMQ_НастройкиПодключения.Действует КАК Действует
		|ИЗ
		|	РегистрСведений.RMQ_НастройкиПодключения КАК RMQ_НастройкиПодключения
		|ГДЕ
		|	RMQ_НастройкиПодключения.ВиртуальныйХост = &ВиртуальныйХост";
	
	Запрос.УстановитьПараметр("ВиртуальныйХост", ВиртуальныйХост);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Отказ = Истина;
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Не заданы настройки подключения для виртуального хоста %1!'"), ВиртуальныйХост);
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ВыборкаДетальныеЗаписи.Следующий();
	
	Если НЕ ВыборкаДетальныеЗаписи.Действует Тогда
		Отказ = Истина;
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Настройки подключения для виртуального хоста %1 не действуют!'"), ВиртуальныйХост);
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура("ВиртуальныйХост, Адрес, Порт, ИмяПользователя, Пароль");
	ЗаполнитьЗначенияСвойств(СтруктураВозврата, ВыборкаДетальныеЗаписи);
	
	Возврат СтруктураВозврата;
КонецФункции

Процедура ЗарегистрироватьОбъектыВИсходящихСообщенияхОбмена(Объект) Экспорт
	ТипОбъекта = ТипЗнч(Объект.Ссылка);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	RMQ_ТочкиОбменаДляПубликацииДанныхСрезПоследних.Объект КАК Объект,
		|	RMQ_ТочкиОбменаДляПубликацииДанныхСрезПоследних.ТочкаОбмена КАК ТочкаОбмена,
		|	RMQ_ТочкиОбменаДляПубликацииДанныхСрезПоследних.КлючМаршрутизации КАК КлючМаршрутизации,
		|	RMQ_ТочкиОбменаДляПубликацииДанныхСрезПоследних.НастройкаОтбораОбъектов КАК НастройкаОтбораОбъектов
		|ИЗ
		|	РегистрСведений.RMQ_ТочкиОбменаДляПубликацииДанных.СрезПоследних(
		|			,
		|			ТИПЗНАЧЕНИЯ(Объект) = &ТипОбъекта
		|				И (Объект = &Объект
		|					ИЛИ Объект = &ПустойОбъект)) КАК RMQ_ТочкиОбменаДляПубликацииДанныхСрезПоследних
		|ГДЕ
		|	RMQ_ТочкиОбменаДляПубликацииДанныхСрезПоследних.Действует"; 
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПустойОбъект", "ЗНАЧЕНИЕ(" + Объект.Метаданные().ПолноеИмя() + ".ПустаяСсылка)");
	
	Запрос.УстановитьПараметр("Объект", Объект.Ссылка);
	Запрос.УстановитьПараметр("ТипОбъекта", ТипОбъекта);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
    Таблица = РезультатЗапроса.Выгрузить();
	Таблица.Колонки.Добавить("Приоритет");
	
	ОбъектВыгружается = Ложь;
	
	Для Каждого Строка Из Таблица Цикл
		Если ЗначениеЗаполнено(Строка.Объект) Тогда
			Строка.Приоритет = 1;
		ИначеЕсли Строка.НастройкаОтбораОбъектов.Получить() <> Неопределено Тогда
			Строка.Приоритет = 2;
		Иначе
			Строка.Приоритет = 3;
		КонецЕсли;
	КонецЦикла;   
	
	Таблица.Сортировать("Приоритет");
	
	Для Каждого Строка Из Таблица Цикл 
		Если Строка.Приоритет = 1 ИЛИ Строка.Приоритет = 3 Тогда
			ОбъектВыгружается = Истина;
			ТочкаОбмена = Строка.ТочкаОбмена;
			КлючМаршрутизации = Строка.КлючМаршрутизации;
			Прервать;
		ИначеЕсли RMQ_ОбщегоНазначения.ОбъектСоответствуетОтбору(Объект, Строка.НастройкаОтбораОбъектов.Получить()) Тогда
			ОбъектВыгружается = Истина;
			ТочкаОбмена = Строка.ТочкаОбмена;
			КлючМаршрутизации = Строка.КлючМаршрутизации;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Сериализатор = Новый СериализаторXDTO(ФабрикаXDTO);
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	Сериализатор.ЗаписатьJSON(ЗаписьJSON, Объект, НазначениеТипаXML.Явное);
	ТекстСообщения = ЗаписьJSON.Закрыть();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	RMQ_ИсходящиеСообщенияОбмена.ИдентификаторСообщения КАК ИдентификаторСообщения
		|ИЗ
		|	РегистрСведений.RMQ_ИсходящиеСообщенияОбмена КАК RMQ_ИсходящиеСообщенияОбмена
		|ГДЕ
		|	RMQ_ИсходящиеСообщенияОбмена.СсылкаНаОбъект = &СсылкаНаОбъект";
	
	Запрос.УстановитьПараметр("СсылкаНаОбъект", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ИдентификаторСообщения = ВыборкаДетальныеЗаписи.ИдентификаторСообщения;
	Иначе
		ИдентификаторСообщения = Объект.Ссылка.УникальныйИдентификатор();
	КонецЕсли;	
	
	НаборЗаписей = РегистрыСведений.RMQ_ИсходящиеСообщенияОбмена.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИдентификаторСообщения.Установить(ИдентификаторСообщения);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		Запись = НаборЗаписей.Добавить();
		Запись.ИдентификаторСообщения = ИдентификаторСообщения;
		Запись.СсылкаНаОбъект = Объект.Ссылка;
	Иначе
		Запись = НаборЗаписей[0];
	КонецЕсли;

	Запись.ТекстСообщения = ТекстСообщения;
    Запись.ДатаЗаписи = ТекущаяДатаСеанса();
	Запись.ТочкаОбмена = ТочкаОбмена;
	Запись.КлючМаршрутизации = КлючМаршрутизации;
	
	НаборЗаписей.Записать();
КонецПроцедуры