
Функция ЗначенияРеквизитовОбъекта(Ссылка, Знач ИменаРеквизитов) Экспорт
	ИменаРеквизитовИсходные = ИменаРеквизитов;
	
	МассивИменРеквизитов = СтрРазделить(ИменаРеквизитов, ",",);

	Индекс = МассивИменРеквизитов.Найти("Ссылка");
	
	Если Индекс <> Неопределено Тогда
		МассивИменРеквизитов.Удалить(Индекс);
	КонецЕсли;

	Для Н = 0 По МассивИменРеквизитов.ВГраница() Цикл
		МассивИменРеквизитов[Н] = "ИмяТаблицы." + СокрЛП(МассивИменРеквизитов[Н]) + " КАК " + СокрЛП(МассивИменРеквизитов[Н]);
	КонецЦикла;
	
	ИменаРеквизитов = СтрСоединить(МассивИменРеквизитов, ",");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ 
		|	" + ИменаРеквизитов + ",
		|	ИмяТаблицы.Ссылка КАК Ссылка
		|ИЗ
		|	" + Ссылка.Метаданные().ПолноеИмя() + " КАК ИмяТаблицы
		|ГДЕ
		|	ИмяТаблицы.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ВыборкаДетальныеЗаписи.Следующий();
	
	Результат = Новый Структура(ИменаРеквизитовИсходные);
	ЗаполнитьЗначенияСвойств(Результат, ВыборкаДетальныеЗаписи);
	
	Возврат Результат;
КонецФункции

Процедура СоздатьОбъектИзТекстаСообщения(ТекстСообщения) Экспорт
	Сериализатор = Новый СериализаторXDTO(ФабрикаXDTO);
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ТекстСообщения);
	
	ПрочитанныйОбъект = Сериализатор.ПрочитатьJSON(ЧтениеJSON);
	ПрочитанныйОбъект.ОбменДанными.Загрузка = Истина;
	ПрочитанныйОбъект.Записать();
	
	ЧтениеJSON.Закрыть();
КонецПроцедуры

Функция ОбъектСоответствуетОтбору(Объект, НастройкиКомпоновщика) Экспорт
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	
	СКД = Новый СхемаКомпоновкиДанных;
	
    ИсточникДанных = СКД.ИсточникиДанных.Добавить();
    ИсточникДанных.Имя = "ИсточникДанных1";
    ИсточникДанных.ТипИсточникаДанных = "Local";
    
    НаборДанныхЗапрос = СКД.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
    НаборДанныхЗапрос.Имя = "НаборДанных1";
    НаборДанныхЗапрос.ИсточникДанных = ИсточникДанных.Имя;
	
	НаборДанныхЗапрос.АвтоЗаполнениеДоступныхПолей = Истина;
	
	НаборДанныхЗапрос.Запрос = "ВЫБРАТЬ
	               |	Таблица.*
	               |ИЗ
	               |	" + Метаданные.НайтиПоТипу(ТипЗнч(Объект)).ПолноеИмя() + " КАК Таблица";
	
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СКД);
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных);
	КомпоновщикНастроек.Инициализировать(ИсточникНастроек);
	
	КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновщика);
	
	ГруппировкаКД = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	
	ГруппировкаКД.Использование = Истина;
	
	ПолеНабора = НаборДанныхЗапрос.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	ПолеНабора.Поле = "Ссылка";
	ПолеНабора.ПутьКДанным = "Ссылка";
	
	ПолеГруппировки = ГруппировкаКД.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеГруппировки.Использование = Истина;
	ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных("Ссылка");
	ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
			
	ГруппировкаКД.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	
	НастройкиКомпоновки = КомпоновщикНастроек.ПолучитьНастройки();
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СКД, НастройкиКомпоновки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	
	ПроцессорВывода.УстановитьОбъект(ТаблицаДанных);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Возврат ТаблицаДанных.Найти(Объект.Ссылка, "Ссылка") <> Неопределено;
КонецФункции
